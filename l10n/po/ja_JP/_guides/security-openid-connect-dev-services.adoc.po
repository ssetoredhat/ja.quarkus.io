# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-05-17 15:05+0000\n"
"PO-Revision-Date: 2022-06-27 13:20+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.1\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-openid-connect-dev-services.adoc:6
#, no-wrap
msgid "Dev Services and UI for OpenID Connect (OIDC)"
msgstr "OpenID Connect (OIDC) の開発サービスと UI"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:12
msgid "This guide covers the Dev Services and UI for OpenID Connect (OIDC) Keycloak provider and explains how to support Dev Services and UI for other OpenID Connect providers.  It also describes Dev UI for all OpenID Connect providers which have already been started before Quarkus is launched in a dev mode."
msgstr "このガイドでは、OpenID Connect（OIDC）のKeycloakプロバイダのDev ServicesとUIを取り上げ、他のOpenID ConnectプロバイダのDevサービスとUIをサポートする方法について説明します。また、Quarkusを開発モードで起動する前にすでに開始されているすべてのOpenID ConnectプロバイダのDev UIについても説明しています。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-dev-services.adoc:13
#, no-wrap
msgid "Introduction"
msgstr "はじめに"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:17
msgid "Quarkus introduces an experimental `Dev Services For Keycloak` feature which is enabled by default when the `quarkus-oidc` extension is started in dev mode and when the integration tests are running in test mode, but only when no `quarkus.oidc.auth-server-url` property is configured.  It starts a Keycloak container for both the dev and/or test modes and initializes them by registering the existing Keycloak realm or creating a new realm with the client and users for you to start developing your Quarkus application secured by Keycloak immediately. It will restart the container when the `application.properties` or the realm file changes have been detected."
msgstr "Quarkus は、実験的な `Dev Services For Keycloak` 機能を導入しています。これは、`quarkus-oidc` エクステンションが開発モードで起動され、統合テストがテストモードで実行されている場合にデフォルトで有効になります。ただし、`quarkus.oidc.auth-server-url` プロパティが設定されいていない場合に限ります。開発モードかテストモード、あるいはその両方で Keycloak コンテナーを起動し、既存の Keycloak レルムを登録するか、クライアントとユーザーで新しいレルムを作成して初期化することで、Keycloak で保護された Quarkus アプリケーションの開発をすぐに開始します。`application.properties` またはレルムファイルの変更が検出されると、コンテナーが再起動します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:19
msgid "Additionally, xref:dev-ui.adoc[Dev UI] available at http://localhost:8080/q/dev[/q/dev] complements this feature with a Dev UI page which helps to acquire the tokens from Keycloak and test your Quarkus application."
msgstr "さらに、http://localhost:8080/q/dev[/q/dev] で入手可能な xref:dev-ui.adoc[Dev UI] は、Dev UI ページでこの機能を補完します。これは、Keycloak からトークンを取得して Quarkus アプリケーションをテストする際に役立ちます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:21
msgid "If `quarkus.oidc.auth-server-url` is already set then a generic OpenID Connect Dev Console which can be used with all OpenID Connect providers will be activated, please see <<dev-ui-all-oidc-providers,Dev UI for all OpenID Connect Providers>> for more information."
msgstr "`quarkus.oidc.auth-server-url` がすでに設定されている場合は、すべての OpenIDConnect プロバイダーで使用できる汎用 OpenIDConnectDevConsole がアクティブ化されます。詳細は <<dev-ui-all-oidc-providers,Dev UI for all OpenID Connect Providers>> を参照してください。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-dev-services.adoc:22
#, no-wrap
msgid "Dev Services for Keycloak"
msgstr "Dev Services for Keycloak"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:25
msgid "Start your application without configuring `quarkus.oidc` properties in `application.properties` with:"
msgstr "次のコマンドを使用して、`application.properties` の `quarkus.oidc` プロパティーを設定せずにアプリケーションを起動します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:29
msgid "You will see in the console something similar to:"
msgstr "コンソールには以下のように表示されます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:35
#, no-wrap
msgid ""
"KeyCloak Dev Services Starting:\n"
"2021-11-02 17:14:24,864 INFO  [org.tes.con.wai.str.HttpWaitStrategy] (build-10) /unruffled_agnesi: Waiting for 60 seconds for URL: http://localhost:32781 (where port 32781 maps to container port 8080)\n"
"2021-11-02 17:14:44,170 INFO  [io.qua.oid.dep.dev.key.KeycloakDevServicesProcessor] (build-10) Dev Services for Keycloak started.\n"
msgstr ""
"KeyCloak Dev Services Starting:\n"
"2021-11-02 17:14:24,864 INFO  [org.tes.con.wai.str.HttpWaitStrategy] (build-10) /unruffled_agnesi: Waiting for 60 seconds for URL: http://localhost:32781 (where port 32781 maps to container port 8080)\n"
"2021-11-02 17:14:44,170 INFO  [io.qua.oid.dep.dev.key.KeycloakDevServicesProcessor] (build-10) Dev Services for Keycloak started.\n"

#. type: delimited block =
#: upstream/_guides/security-openid-connect-dev-services.adoc:40
msgid "When logging in the Keycloak admin console, the username is `admin` and the password is `admin`."
msgstr "Keycloak 管理コンソールにログインする場合、ユーザー名は `admin`、パスワードは `admin` です。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:43
msgid "Note that by default, `Dev Services for Keycloak` will not start a new container if it finds a container with a `quarkus-dev-service-keycloak` label and connect to it if this label's value matches the value of the `quarkus.keycloak.devservices.service-name` property (default value is `quarkus`). In such cases you will see a slighty different output when running:"
msgstr "デフォルトでは、`Dev Services for Keycloak` は `quarkus-dev-service-keycloak` ラベルの付いたコンテナーを見つけると新しいコンテナーを起動せず、このラベルの値が `quarkus.keycloak.devservices.service-name` プロパティーの値 (デフォルト値は `quarkus`) と一致する場合はこれに接続することに注意してください。その場合、以下の実行中はわずかに異なる出力が表示されます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:51
#, no-wrap
msgid ""
"2021-08-27 18:42:43,530 INFO  [io.qua.dev.com.ContainerLocator] (build-15) Dev Services container found: 48fee151a31ddfe32c39965be8f61108587b25ed2f66cdc18bb926d9e2e570c5 (quay.io/keycloak/keycloak:14.0.0). Connecting to: 0.0.0.0:32797.\n"
"2021-08-27 18:42:43,600 INFO  [io.qua.oid.dep.dev.key.KeycloakDevServicesProcessor] (build-15) Dev Services for Keycloak started.\n"
"...\n"
msgstr ""
"2021-08-27 18:42:43,530 INFO  [io.qua.dev.com.ContainerLocator] (build-15) Dev Services container found: 48fee151a31ddfe32c39965be8f61108587b25ed2f66cdc18bb926d9e2e570c5 (quay.io/keycloak/keycloak:14.0.0). Connecting to: 0.0.0.0:32797.\n"
"2021-08-27 18:42:43,600 INFO  [io.qua.oid.dep.dev.key.KeycloakDevServicesProcessor] (build-15) Dev Services for Keycloak started.\n"
"...\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:54
msgid "Note that you can disable sharing the containers with `quarkus.keycloak.devservices.shared=false`."
msgstr "`quarkus.keycloak.devservices.shared=false` でコンテナーの共有を無効にできることに注意してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:56
msgid "Now open the main link:http://localhost:8080/q/dev[Dev UI page] and you will see the `OpenID Connect Card` linking to a Keycloak page:"
msgstr "ここでメインの http://localhost:8080/q/dev[Dev UI ページ] を開くと、Keycloak ページにリンクしている `OpenID Connect Card` が表示されます。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_guides/security-openid-connect-dev-services.adoc:57
#: upstream/_guides/security-openid-connect-dev-services.adoc:73
#: upstream/_guides/security-openid-connect-dev-services.adoc:77
#: upstream/_guides/security-openid-connect-dev-services.adoc:81
#: upstream/_guides/security-openid-connect-dev-services.adoc:91
#: upstream/_guides/security-openid-connect-dev-services.adoc:129
#: upstream/_guides/security-openid-connect-dev-services.adoc:151
#: upstream/_guides/security-openid-connect-dev-services.adoc:162
#: upstream/_guides/security-openid-connect-dev-services.adoc:221
#: upstream/_guides/security-openid-connect-dev-services.adoc:236
#, no-wrap
msgid "Dev"
msgstr "Dev"

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-dev-services.adoc:57
#, no-wrap
msgid "dev-ui-oidc-keycloak-card.png"
msgstr "dev-ui-oidc-keycloak-card.png"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:60
msgid "Click on the `Provider: Keycloak` link and you will see a Keycloak page which will be presented slightly differently depending on how `Dev Services for Keycloak` feature has been configured."
msgstr "`Provider:Keycloak` リンクをクリックすると、Keycloak ページが表示されます。このページは、`Dev ServicesforKeycloak` 機能がどのように設定されているかによって少し異なります。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-dev-services.adoc:62
#, no-wrap
msgid "Developing Service Applications"
msgstr "サービスアプリケーションの開発"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:65
msgid "By default the Keycloak page can be used to support the development of a xref:security-openid-connect.adoc[Quarkus OIDC service application]."
msgstr "デフォルトでは、Keycloak ページを使用して、xref:security-openid-connect.adoc[Quarkus OIDC サービスアプリケーション] の開発をサポートできます。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-dev-services.adoc:67
#, no-wrap
msgid "Authorization Code Grant"
msgstr "認可コード グラント"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:70
msgid "If you set `quarkus.oidc.devui.grant.type=code` in `application.properties` (this is a default value) then an `authorization_code` grant will be used to acquire both access and ID tokens. Using this grant is recommended to emulate a typical flow where a `Single Page Application` acquires the tokens and uses them to access Quarkus services."
msgstr "`application.properties` で `quarkus.oidc.devui.grant.type=code` (デフォルト値) を設定すると、`authorization_code` 許可を使用してアクセストークンと ID トークンの両方が取得されます。この許可を使用して、`Single Page Application` がトークンを取得し、それらを使用して Quarkus サービスにアクセスする一般的なフローをエミュレートすることをお勧めします。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:72
msgid "First you will see an option to `Log into Single Page Application`:"
msgstr "まず、`Log into Single Page Application` オプションが表示されます。"

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-dev-services.adoc:73
#, no-wrap
msgid "dev-ui-keycloak-sign-in-to-spa.png"
msgstr "dev-ui-keycloak-sign-in-to-spa.png"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:76
msgid "Next, after you select this option, you will be redirected to Keycloak to authenticate, example, as `alice:alice` and then returned to the page representing the SPA:"
msgstr "次に、このオプションを選択すると Keycloak にリダイレクトされ、たとえば `alice:alice`として認証され、SPA 表示ページに戻ります。"

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-dev-services.adoc:77
#, no-wrap
msgid "dev-ui-keycloak-test-service-from-spa.png"
msgstr "dev-ui-keycloak-test-service-from-spa.png"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:80
msgid "You can view the acquired access and ID tokens, for example:"
msgstr "取得したアクセストークンやIDトークンなどを確認することができます。"

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-dev-services.adoc:81
#, no-wrap
msgid "dev-ui-keycloak-decoded-tokens.png"
msgstr "dev-ui-keycloak-decoded-tokens.png"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:84
msgid "This view shows the encoded JWT token on the left hand side and highlights the headers (red colour), payload/claims (green colour) and signature (blue colour). It also shows the decoded JWT token on the right hand side where you can see the header and claim names and their values."
msgstr "このビューでは、左側にエンコードされた JWT トークンが表示され、ヘッダー (赤色)、ペイロード/クレーム (緑色)、および署名 (青色) が強調表示されます。また、右側にデコードされた JWT トークンが表示され、ヘッダーとクレームの名前とその値を確認できます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:86
msgid "Next test the service with either the current access or ID token. SPA usually sends the access tokens to the application endpoints but there could be cases where the ID tokens are forwarded to the application frontends for them to be aware about the user who is currently logged into SPA."
msgstr "次に、現在のアクセスまたは ID トークンを使用してサービスをテストします。SPA は通常、アクセストークンをアプリケーションエンドポイントに送信しますが、ID トークンがアプリケーションフロントエンドに転送され、現在 SPA にログインしているユーザーを認識できる場合があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:88
msgid "Finally you can select a `Log Out` image::dev-ui-keycloak-logout.png option if you'd like to log out and authenticate to Keycloak as a different user."
msgstr "最後に、ログアウトして別のユーザーとして Keycloak で認証する場合は、`Log Out` image::dev-ui-keycloak-logout.png オプションを選択できます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:90
msgid "Note Keycloak may return an error when you try to `Log into Single Page Application`. For example, `quarkus.oidc.client-id` may not match the client id in the realm imported to Keycloak or the client in this realm is not configured correctly to support the authorization code flow, etc. In such cases Keycloak will return an `error_description` query parameter and `Dev UI` will also show this error description, for example:"
msgstr "シングルページアプリケーションにログインしようとすると、Keycloak がエラーを返す場合があることに注意してください。たとえば、`quarkus.oidc.client-id` が Keycloak にインポートされたレルムのクライアント ID と一致しない場合や、このレルムのクライアントが認証コードフローをサポートするように正しく設定されていない場合などです。このような場合、Keycloak は `error_description` クエリーパラメーターと `DevUI` も、このエラーの説明を表示します。以下はその例です。"

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-dev-services.adoc:91
#, no-wrap
msgid "dev-ui-keycloak-login-error.png"
msgstr "dev-ui-keycloak-login-error.png"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:94
msgid "If the error occurs then log into Keycloak using the `Keycloak Admin` option and update the realm configuration as necesary and also check the `application.properties`."
msgstr "エラーが発生した場合は、`Keycloak Admin` オプションを使用して Keycloak にログインし、必要に応じてレルム設定を更新し、`application.properties` も確認します。"

#. type: Title =====
#: upstream/_guides/security-openid-connect-dev-services.adoc:95
#, no-wrap
msgid "Test with Swagger UI or GrapghQL UI"
msgstr "Swagger UI または GrapghQL UI を使用したテスト"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:98
msgid "You can avoid manually entering the service paths and test your service with `Swagger UI` or `GraphQL UI` if `quarkus-smallrye-openapi` and/or `quarkus-smallrye-graphql` are used in your project. For example, if you start Quarkus in dev mode with both `quarkus-smallrye-openapi` and `quarkus-smallrye-graphql` dependencies then you will see the following options after logging in into Keycloak:"
msgstr "プロジェクトで `quarkus-smallrye-openapi` や `quarkus-smallrye-graphql` が使用されている場合、サービスパスを手動で入力することを避け、`Swagger UI` または `GraphQL UI` を使用してサービスをテストできます。たとえば、`quarkus-smallrye-openapi` と `quarkus-smallrye-graphql` の両方の依存関係を使用して開発モードで Quarkus を起動すると、Keycloak にログインした後に次のオプションが表示されます。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_guides/security-openid-connect-dev-services.adoc:99
#, no-wrap
msgid "Test"
msgstr "テスト"

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-dev-services.adoc:99
#, no-wrap
msgid "dev-ui-keycloak-test-service-swaggerui-graphql.png"
msgstr "dev-ui-keycloak-test-service-swaggerui-graphql.png"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:103
msgid "For example, clicking on `Swagger UI` will open `Swagger UI` in a new browser tab where you can test the service using the token acquired by Dev UI for Keycloak.  and `Swagger UI` will not try to re-authenticate again."
msgstr "たとえば、`Swagger UI` をクリックすると、新しいブラウザータブで `Swagger UI` が開き、Dev UI for Keycloak によって取得されたトークンを使用してサービスをテストできます。また、`Swagger UI`は再認証を試みません。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:105
msgid "Integration with `GraphQL UI` works in a similar way, the access token acquired by Dev UI for Keycloak will be used."
msgstr "`GraphQL UI`との統合も同様に機能し、Keycloak 用に Dev UI によって取得されたアクセストークンが使用されます。"

#. type: delimited block =
#: upstream/_guides/security-openid-connect-dev-services.adoc:109
msgid "You may need to register a redirect URI for the authorization code flow initiated by Dev UI for Keycloak to work because Keycloak may enforce that the authenticated users are redirected only to the configured redirect URI. It is recommended to do in production to avoid the users being redirected to the wrong endpoints which might happen if the correct `redirect_uri` parameter in the authentication request URI has been manipulated."
msgstr "Keycloak は、認証されたユーザーが設定されたリダイレクト URI にのみリダイレクトされるように強制する場合があるため、Keycloak が機能するためには Dev UI によって開始される認証コードフローのリダイレクト URI を登録する必要がある場合があります。認証要求内の正しい `redirect_uri` パラメーターが操作されると、ユーザーが間違ったエンドポイントにリダイレクトされる可能性があるため、本番環境ではこれを行うことを推奨します。"

#. type: delimited block =
#: upstream/_guides/security-openid-connect-dev-services.adoc:111
msgid "If Keycloak does enforce it then you will see an authentication error informing you that the `redirect_uri` value is wrong."
msgstr "Keycloak がそれを強制する場合は、`redirect_uri` 値が間違っていることを通知する認証エラーが表示されます。"

#. type: delimited block =
#: upstream/_guides/security-openid-connect-dev-services.adoc:113
msgid "In this case select the `Keycloak Admin` option in the right top corner, login as `admin:admin`, select the test realm and the client which Dev UI for Keycloak is configured with and add `http://localhost:8080/q/dev/io.quarkus.quarkus-oidc/provider` to `Valid Redirect URIs`. If you used `-Dquarkus.http.port` when starting Quarkus then change `8080` to the value of `quarkus.http.port`."
msgstr "この場合、右上隅の `Keycloak Admin` オプションを選択し、`admin:admin` としてログインし、Dev UI for Keycloak が設定されているテストレルムとクライアントを選択して、`Valid Redirect URIs` に `http://localhost:8080/q/dev/io.quarkus.quarkus-oidc/provider` を追加します。Quarkus の起動に `-Dquarkus.http.port` を使用した場合は、`8080` を `quarkus.http.port` の値に変更します。"

#. type: delimited block =
#: upstream/_guides/security-openid-connect-dev-services.adoc:115
msgid "If the container is shared between multiple applications running on different ports then you will need to register `redirect_uri` values for each of these applications."
msgstr "コンテナーが異なるポートで実行されている複数のアプリケーション間で共有されている場合は、これらのアプリケーションごとに `redirect_uri` 値を登録する必要があります。"

#. type: delimited block =
#: upstream/_guides/security-openid-connect-dev-services.adoc:117
msgid "You can set the `redirect_uri` value to `*` only for the test purposes, especially when the containers are shared between multiple applications."
msgstr "特にコンテナーが複数のアプリケーション間で共有されている場合は、テスト目的でのみ `redirect_uri` 値を `*` に設定できます。"

#. type: delimited block =
#: upstream/_guides/security-openid-connect-dev-services.adoc:119
msgid "`*` `redirect_uri` value is set by `Dev Services for Keycloak` when it creates a default realm, if no custom realm is imported."
msgstr "カスタムレルムがインポートされていない場合、`*` `redirect_uri` の値はデフォルトのレルムを作成するときに`Dev Services for Keycloak`によって設定されます。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-dev-services.adoc:121
#, no-wrap
msgid "Implicit Grant"
msgstr "インプリシット・グラント"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:124
msgid "If you set `quarkus.oidc.devui.grant.type=implicit` in `application.properties` then an `implicit` grant will be used to acquire both access and ID tokens. Use this grant for emulating a `Single Page Application` only if the authorization code grant does not work (for example, a client is configured in Keycloak to support an implicit grant, etc)."
msgstr "`application.properties` で `quarkus.oidc.devui.grant.type=implicit` を設定すると、アクセストークンと ID トークンの両方を取得するために `implicit` グラントが使用されます。認証コードグラントが機能しない場合に限り (暗示的グラントをサポートするためにクライントが Keycloak に設定されている場合など)、このグラントを使用して `Single Page Application` をエミュレートします。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-dev-services.adoc:125
#, no-wrap
msgid "Password Grant"
msgstr "パスワード・グラント"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:128
msgid "If you set `quarkus.oidc.devui.grant.type=password` in `application.properties` then you will see a screen like this one:"
msgstr "`application.properties` で `quarkus.oidc.devui.grant.type=password` を設定すると、次のような画面が表示されます。"

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-dev-services.adoc:129
#, no-wrap
msgid "dev-ui-keycloak-password-grant.png"
msgstr "dev-ui-keycloak-password-grant.png"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:134
msgid "Enter a registered user name, user password, a relative service endpoint path, click on `Test Service` and you will see a status code such as `200`, `403`, `401` or `404` printed.  If the user name is also set in `quarkus.keycloak.devservices.users` map property containing user names and passwords then you do not have to set a password when testing the service.  But note, you do not have to initialize `quarkus.keycloak.devservices.users` to test the service using the password grant."
msgstr "登録ユーザー名、ユーザーパスワード、相対サービスエンドポイントパスを入力して `Test Service` をクリックすると、`200`、`403`、`401` または `404` などのステータスコードが出力されます。ユーザー名とパスワードを含む `quarkus.keycloak.devservices.users` マッププロパティーでもユーザー名が設定されている場合は、サービスのテスト時にパスワードを設定する必要はありません。ただし、パスワードグラントを使用してサービスをテストするために、`quarkus.keycloak.devservices.users` を初期化する必要はないことに注意してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:136
msgid "You will also see in the Dev UI console something similar to:"
msgstr "また、Dev UI コンソールには以下のように表示されます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:143
#, no-wrap
msgid ""
"2021-07-19 17:58:11,407 INFO  [io.qua.oid.dep.dev.key.KeycloakDevConsolePostHandler] (security-openid-connect-quickstart-dev.jar) (DEV Console action) Using password grant to get a token from 'http://localhost:32818/realms/quarkus/protocol/openid-connect/token' for user 'alice' in realm 'quarkus' with client id 'quarkus-app'\n"
"2021-07-19 17:58:11,533 INFO  [io.qua.oid.dep.dev.key.KeycloakDevConsolePostHandler] (security-openid-connect-quickstart-dev.jar) (DEV Console action) Test token: eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJ6Z2tDazJQZ1JaYnVlVG5kcTFKSW1sVnNoZ2hhbWhtbnBNcXU0QUt5MnJBIn0.ey...\n"
"2021-07-19 17:58:11,536 INFO  [io.qua.oid.dep.dev.key.KeycloakDevConsolePostHandler] (security-openid-connect-quickstart-dev.jar) (DEV Console action) Sending token to 'http://localhost:8080/api/admin'\n"
"2021-07-19 17:58:11,674 INFO  [io.qua.oid.dep.dev.key.KeycloakDevConsolePostHandler] (security-openid-connect-quickstart-dev.jar) (DEV Console action) Result: 200\n"
msgstr ""
"2021-07-19 17:58:11,407 INFO  [io.qua.oid.dep.dev.key.KeycloakDevConsolePostHandler] (security-openid-connect-quickstart-dev.jar) (DEV Console action) Using password grant to get a token from 'http://localhost:32818/realms/quarkus/protocol/openid-connect/token' for user 'alice' in realm 'quarkus' with client id 'quarkus-app'\n"
"2021-07-19 17:58:11,533 INFO  [io.qua.oid.dep.dev.key.KeycloakDevConsolePostHandler] (security-openid-connect-quickstart-dev.jar) (DEV Console action) Test token: eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJ6Z2tDazJQZ1JaYnVlVG5kcTFKSW1sVnNoZ2hhbWhtbnBNcXU0QUt5MnJBIn0.ey...\n"
"2021-07-19 17:58:11,536 INFO  [io.qua.oid.dep.dev.key.KeycloakDevConsolePostHandler] (security-openid-connect-quickstart-dev.jar) (DEV Console action) Sending token to 'http://localhost:8080/api/admin'\n"
"2021-07-19 17:58:11,674 INFO  [io.qua.oid.dep.dev.key.KeycloakDevConsolePostHandler] (security-openid-connect-quickstart-dev.jar) (DEV Console action) Result: 200\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:146
msgid "A token is acquired from Keycloak using a `password` grant and is sent to the service endpoint."
msgstr "トークンは `password` グラントを使用して Keycloak から取得され、サービスエンドポイントに送信されます。"

#. type: Title ====
#: upstream/_guides/security-openid-connect-dev-services.adoc:147
#, no-wrap
msgid "Client Credentials Grant"
msgstr "クライアントクレデンシャル・グラント"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:150
msgid "If you set `quarkus.oidc.devui.grant.type=client` then a `client_credentials` grant will be used to acquire a token, with the page showing no `User` field in this case:"
msgstr "`quarkus.oidc.devui.grant.type=client` を設定すると、トークンの取得に `client_credentials` グラントが使用されます。この場合、ページに `User` フィールドは表示されません。"

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-dev-services.adoc:151
#, no-wrap
msgid "dev-ui-keycloak-client-credentials-grant.png"
msgstr "dev-ui-keycloak-client-credentials-grant.png"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:154
msgid "You can test the service the same way as with the `Password` grant."
msgstr "`Password` グラントと同じ方法でサービスをテストできます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-dev-services.adoc:156
#, no-wrap
msgid "Developing OpenID Connect Web App Applications"
msgstr "OpenID Connect Web App アプリケーションの開発"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:159
msgid "If you develop a xref:security-openid-connect-web-authentication.adoc[Quarkus OIDC web-app application] then you should set `quarkus.oidc.application-type=web-app` in `application.properties` before starting the application."
msgstr "xref:security-openid-connect-web-authentication.adoc[Quarkus OIDC web-app アプリケーション] を開発する場合は、アプリケーションを開始する前に `application.properties` で `quarkus.oidc.application-type=web-app` を設定する必要があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:161
msgid "You will see a screen like this one:"
msgstr "次のような画面が表示されます。"

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-dev-services.adoc:162
#, no-wrap
msgid "dev-ui-keycloak-sign-in-to-service.png"
msgstr "dev-ui-keycloak-sign-in-to-service.png"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:165
msgid "Set a relative service endpoint path, click on `Sign In To Service` and you will be redirected to Keycloak to enter a username and password in a new browser tab and get a response from the Quarkus application."
msgstr "相対的なサービスエンドポイントパスを設定し、`Sign In To Service` をクリックすると Keycloak にリダイレクトされます。新しいブラウザータブにユーザー名とパスワードを入力し、Quarkus アプリケーションからレスポンスを取得します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:167
msgid "Note that in this case Dev UI does not really enrich a dev experience since it is a Quarkus OIDC `web-app` application which controls the authorization code flow and acquires the tokens."
msgstr "この場合、Dev UI は認証コードフローを制御してトークンを取得する Quarkus OIDC の `web-app` アプリケーションであるため、開発エクスペリエンスを充実させるものではないことに注意してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:169
msgid "To make Dev UI more useful for supporting the development of OIDC `web-app` applications you may want to consider setting profile specific values for `quarkus.oidc.application-type`:"
msgstr "Dev UI が OIDC `web-app` アプリケーションの開発をより便利にサポートできるようにするために、`quarkus.oidc.application-type` のプロファイル固有値を設定することを検討してください。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:175
#, no-wrap
msgid ""
"%prod.quarkus.oidc.application-type=web-app\n"
"%test.quarkus.oidc.application-type=web-app\n"
"%dev.quarkus.oidc.application-type=service\n"
msgstr ""
"%prod.quarkus.oidc.application-type=web-app\n"
"%test.quarkus.oidc.application-type=web-app\n"
"%dev.quarkus.oidc.application-type=service\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:179
msgid "It will ensure that all Dev UI options described in <<develop-service-applications, Developing OpenID Connect Service Applications>> will be available when your `web-app` application is run in dev mode. The limitation of this approach is that both access and ID tokens returned with the code flow and acquired with Dev UI will be sent to the endpoint as HTTP `Bearer` tokens - which will not work well if your endpoint requires the injection of `IdToken`.  However it will work as expected if your `web-app` application only uses the access token, for example, as a source of roles or to get `UserInfo`, even if it is assumed to be a `service` application in devmode."
msgstr "これにより、開発モードで `web-app` アプリケーションが実行されている際に、<<develop-service-applications, Developing OpenID Connect Service Applications>> で説明されているすべての Dev UI オプションが確実に使用可能なります。このアプローチの制限は、コードフローで返され、Dev UI で取得されたアクセストークンと ID トークンの両方が、HTTP `Bearer` トークンとしてエンドポイントに送信されることです。これは、エンドポイントで `IdToken` の挿入が必要な場合はうまく機能しません。ただし、`web-app` アプリケーションがアクセストークンのみを使用する場合 (たとえばロールのソースとして、または `UserInfo` の取得に)、devmode の `service` アプリケーションであると想定される場合でも期待どおり機能します。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-dev-services.adoc:180
#, no-wrap
msgid "Running the tests"
msgstr "テストの実行"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:183
msgid "You can run the tests against a Keycloak container started in a test mode in a xref:continuous-testing.adoc[Continuous Testing] mode."
msgstr "テストモードで起動した Keycloak コンテナーに対して、xref:continuous-testing.adoc[継続テスト] モードでテストを実行できます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:186
msgid "It is also recommended to run the integration tests against Keycloak using `Dev Services for Keycloak`.  Please see xref:security-openid-connect.adoc#integration-testing-keycloak-devservices[Testing OpenID Connect Service Applications with Dev Services] and xref:security-openid-connect-web-authentication.adoc#integration-testing-keycloak-devservices[Testing OpenID Connect WebApp Applications with Dev Services] for more information."
msgstr "また、`Dev Services for Keycloak` を使用して、Keycloak に対して統合テストを実行することをお勧めします。詳細は、xref:security-openid-connect.adoc#integration-testing-keycloak-devservices[Dev Services を使用した OpenID Connect サービスアプリケーションのテスト] および xref:security-openid-connect-web-authentication.adoc#integration-testing-keycloak-devservices[Dev Services を使用した OpenID Connect WebApp アプリケーションのテスト] を参照してください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-dev-services.adoc:188
#, no-wrap
msgid "Keycloak Initialization"
msgstr "Keycloak の初期化"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:192
msgid "The `quay.io/keycloak/keycloak:17.0.0` image which contains a Keycloak distribution powered by Quarkus is used to start a container by default.  `quarkus.keycloak.devservices.image-name` can be used to change the Keycloak image name. For example, set it to `quay.io/keycloak/keycloak:17.0.0-legacy` to use a Keycloak distribution powered by WildFly."
msgstr "Quarkus を利用した Keycloak ディストリビューションを含む `quay.io/keycloak/keycloak:17.0.0` イメージは、デフォルトでコンテナーを起動するために使用されます。`quarkus.keycloak.devservices.image-name` を使用して、Keycloak イメージ名を変更できます。たとえば、WildFly を利用した Keycloak ディストリビューションを使用するには、これを `quay.io/keycloak/keycloak:17.0.0-legacy` に設定します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:194
msgid "`Dev Services for Keycloak` will initialize a launched Keycloak server next."
msgstr "`Dev Services for Keycloak` は、起動された Keycloak サーバーを次に初期化します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:196
msgid "By default, the `quarkus`, `quarkus-app` client with a `secret` password, `alice` and `bob` users (with the passwords matching the names), and `user` and `admin` roles are created, with `alice` given both `admin` and `user` roles and `bob` - the `user` role."
msgstr "デフォルトでは、`quarkus`、`secret` パスワードを持つ `quarkus-app` クライアント、`alice` および `bob` ユーザー (名前と一致するパスワードを持つ)、`user` および `admin` ロールが作成されます。このとき、`alice` には `admin` と `user` の両方のロールが与えられ、`bob` には `user`のロールが与えられます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:198
msgid "Usernames, secrets and their roles can be customized with `quarkus.keycloak.devservices.users` (the map which contains usernames and secrets) and `quarkus.keycloak.devservices.roles` (the map which contains user names and comma separated role values)."
msgstr "ユーザー名、シークレット、およびそれらのロールは、`quarkus.keycloak.devservices.users` (ユーザー名とシークレットを含むマップ) および `quarkus.keycloak.devservices.roles` (ユーザー名とコンマ区切りのロール値を含むマップ) でカスタマイズできます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:200
msgid "For example:"
msgstr "例えば、以下のようになります。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:207
#, no-wrap
msgid ""
"%dev.quarkus.keycloak.devservices.users.duke=dukePassword\n"
"%dev.quarkus.keycloak.devservices.roles.duke=reader\n"
"%dev.quarkus.keycloak.devservices.users.john=johnPassword\n"
"%dev.quarkus.keycloak.devservices.roles.john=reader,writer\n"
msgstr ""
"%dev.quarkus.keycloak.devservices.users.duke=dukePassword\n"
"%dev.quarkus.keycloak.devservices.roles.duke=reader\n"
"%dev.quarkus.keycloak.devservices.users.john=johnPassword\n"
"%dev.quarkus.keycloak.devservices.roles.john=reader,writer\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:210
msgid "This configuration creates two users:"
msgstr "この設定では、2人のユーザーを作成します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:211
msgid "`duke` with a `dukePassword` password and a `reader` role"
msgstr "`dukePassword` パスワードと `reader` ロールを持つ `duke`"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:212
msgid "`john` with a `johnPassword` password and `reader` and `writer` roles"
msgstr "`johnPassword` パスワードと `reader` および `writer` ロールを持つ `john`"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:214
msgid "`quarkus.oidc.client-id` and `quarkus.oidc.credentials.secret` can be used to customize the client id and secret."
msgstr "`quarkus.oidc.client-id` と `quarkus.oidc.credentials.secret` を使用して、クライアント ID とシークレットをカスタマイズできます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:216
msgid "However it is likely your Keycloak configuration may be more complex and require setting more properties."
msgstr "ただし、Keycloak の設定はこれよりも複雑で、より多くのプロパティーを設定する必要があると思われます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:218
msgid "This is why `quarkus.keycloak.devservices.realm-path` is always checked first before trying to initialize Keycloak with the default or configured realm, client, user and roles properties. If the realm file exists on the file system or classpath then only this realm will be used to initialize Keycloak."
msgstr "これが、デフォルトまたは設定されたレルム、クライアント、ユーザー、およびロールのプロパティーを使用して Keycloak を初期化する前に、`quarkus.keycloak.devservices.realm-path` が常に最初にチェックされる理由です。レルムファイルがファイルシステムまたはクラスパスに存在する場合、このレルムのみが Keycloak の初期化に使用されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:220
msgid "Also the Keycloak page offers an option to `Sign In To Keycloak To Configure Realms` using a `Keycloak Admin` option in the right top corner:"
msgstr "また、Keycloak ページには、右上隅にある `KeycloakAdmin` オプションを使用して、Keycloak にサインインしてレルムを設定 (`SignIn To Keycloak To Configure Realms`) するオプションがあります。"

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-dev-services.adoc:221
#, no-wrap
msgid "dev-ui-keycloak-admin.png"
msgstr "dev-ui-keycloak-admin.png"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:224
msgid "Sign in to Keycloak as `admin:admin` in order to further customize the realm properties, create or import a new realm, export the realm."
msgstr "レルムのプロパティーのカスタマイズ、新規レルムの作成またはインポート、レルムのエクスポートを実行するには、Keycloak に `admin:admin` としてサインインします。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:226
msgid "Note that even if you initialize Keycloak from a realm file, it is still needed to set `quarkus.keycloak.devservices.users` property if a `password` grant is used to acquire the tokens to test the OIDC `service` applications."
msgstr "レルムファイルから Keycloak を初期化する場合でも、トークンを取得して OIDC `service` アプリケーションをテストするために `password` グラントが使用される場合は、`quarkus.keycloak.devservices.users` プロパティーを設定する必要があることに注意してください。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-dev-services.adoc:227
#, no-wrap
msgid "Disable Dev Services for Keycloak"
msgstr "Dev Services for Keycloak の無効化"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:230
msgid "`Dev Services For Keycloak` will not be activated if either `quarkus.oidc.auth-server-url` is already initialized or the default OIDC tenant is disabled with `quarkus.oidc.tenant.enabled=false`, irrespectively of whether you work with Keycloak or not."
msgstr "`quarkus.oidc.auth-server-url` がすでに初期化されているか、デフォルトの OIDC テナントが `quarkus.oidc.tenant.enabled=false` で無効になっている場合、Keycloak を使用するかどうかにかかわらず、`Dev Services ForKeycloak` はアクティブ化されません。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:232
msgid "If you prefer not to have a `Dev Services for Keycloak` container started or do not work with Keycloak then you can also disable this feature with `quarkus.keycloak.devservices.enabled=false` - it will only be necessary if you expect to start `quarkus:dev` without `quarkus.oidc.auth-server-url`."
msgstr "`Dev Services for Keycloak` コンテナーを起動させない、または使用しない場合も、`quarkus.keycloak.devservices.enabled=false` を使用してこの機能を無効化できます。これは、`quarkus.oidc.auth-server-url` なしで `quarkus:dev` を起動する予定がある場合にのみ必要です。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:235
msgid "The main Dev UI page will include an empty `OpenID Connect Card` when `Dev Services for Keycloak` is disabled and the `quarkus.oidc.auth-server-url` property has not been initialized:"
msgstr "`Dev Services for Keycloak` が無効で `quarkus.oidc.auth-server-url` プロパティーが初期化されていない場合、メインの Dev UI ページには空の `OpenIDConnectCard` が含まれます。"

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-dev-services.adoc:236
#, no-wrap
msgid "dev-ui-oidc-card.png"
msgstr "dev-ui-oidc-card.png"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:239
msgid "If `quarkus.oidc.auth-server-url` is already set then a generic OpenID Connect Dev Console which can be used with all OpenID Connect providers may be activated, please see <<dev-ui-all-oidc-providers,Dev UI for all OpenID Connect Providers>> for more information."
msgstr "`quarkus.oidc.auth-server-url` がすでに設定されている場合は、すべての OpenIDConnect プロバイダーで使用できる汎用 OpenIDConnectDevConsole をアクティブ化できます。詳細は <<dev-ui-all-oidc-providers,Dev UI for all OpenID Connect Providers>> を参照してください。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-dev-services.adoc:241
#, no-wrap
msgid "Dev UI for all OpenID Connect Providers"
msgstr "すべての OpenID Connect プロバイダーの Dev UI"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:244
msgid "If `quarkus.oidc.auth-server-url` points to an already started OpenID Connect provider (which can be Keycloak or other provider), `quarkus.oidc.auth-server-url` is set to `service` (which is a default value) and at least `quarkus.oidc.client-id` is set then `Dev UI for all OpenID Connect Providers` will be activated."
msgstr "`quarkus.oidc.auth-server-url` が、すでに起動されている OpenID Connect プロバイダー (Keycloak または他のプロバイダーも可) を指し、`quarkus.oidc.auth-server-url` が `service` (デフォルト値) に設定され、少なくとも `quarkus.oidc.client-id` が設定されている場合、すべての OpenID Connect プロバイダーの Dev UI (`Dev UI for all OpenID Connect Providers`) がアクティブになります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:246
msgid "Setting `quarkus.oidc.credentials.secret` will mostly likely be required for Keycloak and other providers for the authorization code flow initiated from Dev UI to complete, unless the client identified with `quarkus.oidc.client-id` is configured as a public client in your OpenID Connect provider's administration console."
msgstr "Keycloak や その他のプロバイダーでは、`quarkus.oidc.client-id` で指定されたクライアントが使用している OpenID Connect プロバイダーの管理コンソールでパブリッククライアントとして設定されていない限り、Dev UI から開始された認可コードフローを完了するには`quarkus.oidc.credentials.secret` の設定が必要です。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:248
msgid "Run:"
msgstr "実行:"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:252
msgid "And you will see the following message:"
msgstr "以下のメッセージが表示されます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:258
#, no-wrap
msgid ""
"...\n"
"2021-09-07 15:53:42,697 INFO  [io.qua.oid.dep.dev.OidcDevConsoleProcessor] (build-41) OIDC Dev Console: discovering the provider metadata at http://localhost:8180/realms/quarkus/.well-known/openid-configuration\n"
"...\n"
msgstr ""
"...\n"
"2021-09-07 15:53:42,697 INFO  [io.qua.oid.dep.dev.OidcDevConsoleProcessor] (build-41) OIDC Dev Console: discovering the provider metadata at http://localhost:8180/realms/quarkus/.well-known/openid-configuration\n"
"...\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:261
msgid "If the provider metadata discovery has been successful then, after you open the main link:http://localhost:8080/q/dev[Dev UI page], you will see the `OpenID Connect Card` page linking to `Dev Console`:"
msgstr "プロバイダーメタデータの検出が成功した場合、メインの link:http://localhost:8080/q/dev[Dev UI ページ] を開くと、`Dev Console` にリンクされた `OpenID Connect Card` ページが表示されます。"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_guides/security-openid-connect-dev-services.adoc:262
#, no-wrap
msgid "Generic"
msgstr "ジェネリック"

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-dev-services.adoc:262
#, no-wrap
msgid "dev-ui-oidc-devconsole-card.png"
msgstr "dev-ui-oidc-devconsole-card.png"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:265
msgid "Follow the link and you'll be able log in to your provider, get the tokens and test the application. The experience will be the same as described in the <<keycloak-authorization-code-grant,Authorization Code Grant for Keycloak>> section, where `Dev Services for Keycloak` container has been started, especially if you work with Keycloak (please also pay attention to a `redirect_uri` note in that section)."
msgstr "リンクをたどると、プロバイダーにログインしてトークンを取得し、アプリケーションをテストできます。特に Keycloakを使用している場合、これは `Dev Services for Keycloak` コンテナーを起動した <<keycloak-authorization-code-grant,Authorization Code Grant for Keycloak>> セクション (同セクションの `redirect_uri` に関する注意書きも確認してください) で説明したとおりです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:267
msgid "If you work with other providers then a Dev UI experience described in the <<keycloak-authorization-code-grant,Authorization Code Grant for Keycloak>> section might differ slightly. For example, an access token may not be in a JWT format so it won't be possible to show its internal content, though all providers should return an ID Token as JWT."
msgstr "他のプロバイダーと連携している場合、<<keycloak-authorization-code-grant,Authorization Code Grant for Keycloak>> セクションで説明した Dev UI とは若干異なる場合があります。たとえば、アクセストークンは JWT 形式ではない可能性があるため、内部コンテンツは表示できませんが、すべてのプロバイダーは ID トークンを JWT として返す必要があります。"

#. type: delimited block =
#: upstream/_guides/security-openid-connect-dev-services.adoc:271
msgid "The current access token is used by default to test the service with `Swagger UI` or `GrapghQL UI`. If the provider (other than Keycloak) returns a binary access token then it will be used with `Swagger UI` or `GrapghQL UI` only if this provider has a token introspection endpoint otherwise an `IdToken` which is always in a JWT format will be passed to `Swagger UI` or `GrapghQL UI`. In such cases you can verify with the manual Dev UI test that `401` will always be returned for the current binary access token. Also note that using `IdToken` as a fallback with either of these UIs is only possible with the authorization code flow."
msgstr "デフォルトでは、現在のアクセストークンを使用して、`Swagger UI` または `GrapghQL UI` でサービスをテストします。プロバイダー (Keycloak 以外) がバイナリーアクセストークンを返す場合、このプロバイダーにトークンイントロスペクションエンドポイントがある場合にのみ `Swagger UI` または `GrapghQL UI` で使用されます。それ以外の場合は、常に JWT 形式の `IdToken` が `Swagger UI` または `GrapghQL UI` に渡されます。このような場合、手動の Dev UI テストで、現在のバイナリーアクセストークンに対して常に `401` が返されることを確認できます。また、これらの UI のいずれかでフォールバックとして `Id Token` を使用することは、認可コードフローでのみ可能であることに注意してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:274
msgid "Some providers such as `Auth0` do not support a standard RP initiated logout so the provider specific logout properties will have to be confogured for a logout option be visible, please see xref:security-openid-connect-web-authentication.adoc#user-initiated-logout[OpenID Connect User-Initiated Logout] for more information."
msgstr "`Auth0` などの一部のプロバイダーは標準の RP 主導型ログアウトをサポートしていないため、プロバイダー固有のログアウトプロパティーを設定しなければ、ログアウトオプションは表示されません。詳細は、curity-openid-connect-web-authentication.adoc#user-initiated-logout[OpenID Connect ユーザー主導型ログアウト] を参照してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:276
msgid "Similarly, if you'd like to use a `password` or `client_credentials` grant for Dev UI to acquire the tokens then you may have to configure some extra provider specific properties, for example:"
msgstr "同様に、Dev UI に`password` または `client_credentials` グラントを使用してトークンを取得する場合は、次のような追加のプロバイダー固有プロパティーを設定する必要があります。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:281
#, no-wrap
msgid ""
"quarkus.oidc.devui.grant.type=password\n"
"quarkus.oidc.devui.grant-options.password.audience=http://localhost:8080\n"
msgstr ""
"quarkus.oidc.devui.grant.type=password\n"
"quarkus.oidc.devui.grant-options.password.audience=http://localhost:8080\n"

#. type: Title ==
#: upstream/_guides/security-openid-connect-dev-services.adoc:283
#, no-wrap
msgid "Dev Services and UI Support for other OpenID Connect Providers"
msgstr "その他の OpenID Connect プロバイダーの Dev Services と UI サポート"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:286
msgid "Your custom extension would need to extend `quarkus-oidc` and add the dependencies required to support your provider to the extension's `deployment` module only."
msgstr "カスタムエクステンションは、`quarkus-oidc` を拡張し、プロバイダーをサポートするために必要な依存関係をエクステンションの `deployment` モジュールにのみ追加する必要があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:288
msgid "The build step dealing with the `Dev Services` should additionally register two runtime properties into the \"io.quarkus.quarkus-oidc\" namespace: `oidcProviderName` (for example, `Google`) and `oidcProviderUrlBase` (for example: `mycompany.devservices-google`) for the `OpenID Connect Card` to link to the Dev UI page representing your provider, for example:"
msgstr "`Dev Services` を処理するビルドステップでは、`OpenID Connect Card` をプロバイダーを示す Dev UI ページにリンクするために、2 つのランタイムプロパティーを \"io.quarkus.quarkus-oidc\" 名前空間に追加で登録する必要があります: `oidcProviderName` (例: `Google`) と `oidcProviderUrlBase` (例: `mycompany.devservices-google`)。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:292
#, no-wrap
msgid "package io.quarkus.oidc.okta.runtime;\n"
msgstr "package io.quarkus.oidc.okta.runtime;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:294
#, no-wrap
msgid "import java.util.function.Supplier;\n"
msgstr "import java.util.function.Supplier;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:296
#, no-wrap
msgid "import io.quarkus.runtime.annotations.Recorder;\n"
msgstr "import io.quarkus.runtime.annotations.Recorder;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:300
#, no-wrap
msgid ""
"// This simple recorder is the only code which will be located in the extension's `runtime` module\n"
"@Recorder\n"
"public class OktaDevServicesRecorder {\n"
msgstr ""
"// This simple recorder is the only code which will be located in the extension's `runtime` module\n"
"@Recorder\n"
"public class OktaDevServicesRecorder {\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:303
#, no-wrap
msgid ""
"    public Supplier<String> getProviderName() {\n"
"        return new Supplier<String>() {\n"
msgstr ""
"    public Supplier<String> getProviderName() {\n"
"        return new Supplier<String>() {\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:310
#, no-wrap
msgid ""
"            @Override\n"
"            public String get() {\n"
"                return \"OKTA\";\n"
"            }\n"
"        };\n"
"    }\n"
msgstr ""
"            @Override\n"
"            public String get() {\n"
"                return \"OKTA\";\n"
"            }\n"
"        };\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:313
#, no-wrap
msgid ""
"    public Supplier<String> getProviderUrlBase() {\n"
"        return new Supplier<String>() {\n"
msgstr ""
"    public Supplier<String> getProviderUrlBase() {\n"
"        return new Supplier<String>() {\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:321
#, no-wrap
msgid ""
"            @Override\n"
"            public String get() {\n"
"                return \"io.quarkus\" + \".\" + \"quarkus-oidc-okta\";\n"
"            }\n"
"        };\n"
"    }\n"
"}\n"
msgstr ""
"            @Override\n"
"            public String get() {\n"
"                return \"io.quarkus\" + \".\" + \"quarkus-oidc-okta\";\n"
"            }\n"
"        };\n"
"    }\n"
"}\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:324
#, no-wrap
msgid "package io.quarkus.oidc.okta.deployment.devservices;\n"
msgstr "package io.quarkus.oidc.okta.deployment.devservices;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:326
#, no-wrap
msgid "import static io.quarkus.deployment.annotations.ExecutionTime.RUNTIME_INIT;\n"
msgstr "import static io.quarkus.deployment.annotations.ExecutionTime.RUNTIME_INIT;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:328
#, no-wrap
msgid "import java.util.Optional;\n"
msgstr "import java.util.Optional;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:337
#, no-wrap
msgid ""
"import io.quarkus.deployment.IsDevelopment;\n"
"import io.quarkus.deployment.annotations.BuildProducer;\n"
"import io.quarkus.deployment.annotations.BuildStep;\n"
"import io.quarkus.deployment.annotations.Consume;\n"
"import io.quarkus.deployment.annotations.Record;\n"
"import io.quarkus.deployment.builditem.RuntimeConfigSetupCompleteBuildItem;\n"
"import io.quarkus.devconsole.spi.DevConsoleRouteBuildItem;\n"
"import io.quarkus.devconsole.spi.DevConsoleRuntimeTemplateInfoBuildItem;\n"
msgstr ""
"import io.quarkus.deployment.IsDevelopment;\n"
"import io.quarkus.deployment.annotations.BuildProducer;\n"
"import io.quarkus.deployment.annotations.BuildStep;\n"
"import io.quarkus.deployment.annotations.Consume;\n"
"import io.quarkus.deployment.annotations.Record;\n"
"import io.quarkus.deployment.builditem.RuntimeConfigSetupCompleteBuildItem;\n"
"import io.quarkus.devconsole.spi.DevConsoleRouteBuildItem;\n"
"import io.quarkus.devconsole.spi.DevConsoleRuntimeTemplateInfoBuildItem;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:339
#, no-wrap
msgid "public class OktaDevConsoleProcessor {\n"
msgstr "public class OktaDevConsoleProcessor {\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-dev-services.adoc:353
#, no-wrap
msgid ""
"    @BuildStep(onlyIf = IsDevelopment.class)\n"
"    @Record(value = RUNTIME_INIT)\n"
"    public void setOidcProviderProperties(BuildProducer<DevConsoleRuntimeTemplateInfoBuildItem> provider,\n"
"            OktaDevServicesRecorder recorder,\n"
"            Optional<DevServicesConfigBuildItem> configProps) {\n"
"        if (configProps.isPresent()) {\n"
"            provider.produce(new DevConsoleRuntimeTemplateInfoBuildItem(\"io.quarkus\", \"quarkus-oidc\", \"oidcProviderName\",\n"
"                    recorder.getProviderName()));\n"
"            provider.produce(new DevConsoleRuntimeTemplateInfoBuildItem(\"io.quarkus\", \"quarkus-oidc\", \"oidcProviderUrlBase\",\n"
"                    recorder.getProviderUrlBase()));\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""
"    @BuildStep(onlyIf = IsDevelopment.class)\n"
"    @Record(value = RUNTIME_INIT)\n"
"    public void setOidcProviderProperties(BuildProducer<DevConsoleRuntimeTemplateInfoBuildItem> provider,\n"
"            OktaDevServicesRecorder recorder,\n"
"            Optional<DevServicesConfigBuildItem> configProps) {\n"
"        if (configProps.isPresent()) {\n"
"            provider.produce(new DevConsoleRuntimeTemplateInfoBuildItem(\"io.quarkus\", \"quarkus-oidc\", \"oidcProviderName\",\n"
"                    recorder.getProviderName()));\n"
"            provider.produce(new DevConsoleRuntimeTemplateInfoBuildItem(\"io.quarkus\", \"quarkus-oidc\", \"oidcProviderUrlBase\",\n"
"                    recorder.getProviderUrlBase()));\n"
"        }\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:357
msgid "Additionally, the extension should produce a `io.quarkus.oidc.deployment.devservices.OidcProviderBuildItem` to disable the default `Dev Services for Keycloak`, instead of the users having to type `quarkus.keycloak.devservices.enabled=false`."
msgstr "さらに、ユーザーが `quarkus.keycloak.devservices.enabled=false` を入力するのではなく、エクステンションが `io.quarkus.oidc.deployment.devservices.OidcProviderBuildItem` を生成してデフォルトの `Dev Services for Keycloak` を無効にする必要があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:359
msgid "Please follow the xref:dev-ui.adoc[Dev UI] tutorial as well as check the `extensions/oidc/deployment` sources for more ideas."
msgstr "xref:dev-ui.adoc[Dev UI] チュートリアルと `extensions/oidc/deployment` ソースで他のアイデアも確認してください。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-dev-services.adoc:360
#, no-wrap
msgid "Non Application Root Path Considerations"
msgstr "アプリケーション以外のルートパスに関する考慮事項"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:363
msgid "This document refers to the `http://localhost:8080/q/dev` Dev UI URL in several places where `q` is a default non application root path. If you customize `quarkus.http.root-path` and/or `quarkus.http.non-application-root-path` properties then replace `q` accordingly, please see https://quarkus.io/blog/path-resolution-in-quarkus/[Path Resolution in Quarkus] for more information."
msgstr "このドキュメントでは、繰り返し `http://localhost:8080/q/dev` Dev UI URL を参照していますが、この `q` はデフォルトの非アプリケーションルートパスです。`quarkus.http.root-path` や `quarkus.http.non-application-root-path` プロパティーをカスタマイズした場合、`q` を適宜置き換えてください。詳細については、https://quarkus.io/blog/path-resolution-in-quarkus/[Quarkus を使用したパスの解決] を参照してください。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-dev-services.adoc:364
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:367
msgid "xref:dev-ui.adoc[Dev UI]"
msgstr "xref:dev-ui.adoc[Dev UI]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:368
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr "https://www.keycloak.org/documentation.html[Keycloak Documentation]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:369
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "https://openid.net/connect/[OpenID Connect]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:370
msgid "xref:security-openid-connect.adoc[Quarkus - Using OpenID Connect to Protect Service Applications using Bearer Token Authorization]"
msgstr "xref:security-openid-connect.adoc[Quarkus - OpenID Connect (OIDC) を使用した、ベアラートークン認可によるサービスアプリケーションの保護]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:371
msgid "xref:security-openid-connect-web-authentication.adoc[Quarkus - Using OpenID Connect to Protect Web Applications using Authorization Code Flow]"
msgstr "xref:security-openid-connect-web-authentication.adoc[Quarkus - OpenID Connect を使用した、認可コードフローによる Web アプリケーションの保護]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-dev-services.adoc:371
msgid "xref:security.adoc[Quarkus Security]"
msgstr "xref:security.adoc[Quarkus Security]"

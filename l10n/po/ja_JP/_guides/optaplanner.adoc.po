# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-04-12 10:10+0000\n"
"PO-Revision-Date: 2022-06-23 17:36+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: en\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.1\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/optaplanner.adoc:6
#, no-wrap
msgid "OptaPlanner - Using AI to optimize a schedule with OptaPlanner"
msgstr "OptaPlanner - OptaPlanner での AI を使用したスケジュールの最適化"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:13
msgid "This guide walks you through the process of creating a Quarkus application with https://www.optaplanner.org/[OptaPlanner]'s constraint solving Artificial Intelligence (AI)."
msgstr "このガイドでは、https://www.optaplanner.org/[OptaPlanner] の制約解決人工知能 (AI) を使用して Quarkus アプリケーションを作成するプロセスについて説明します。"

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:14
#, no-wrap
msgid "What you will build"
msgstr "何を構築するか"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:17
msgid "You will build a REST application that optimizes a school timetable for students and teachers:"
msgstr "生徒と教師の時間割を最適化する REST アプリケーションを作成します。"

#. type: Target for macro image
#: upstream/_guides/optaplanner.adoc:18
#, no-wrap
msgid "optaplanner-time-table-app-screenshot.png"
msgstr "optaplanner-time-table-app-screenshot.png"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:22
msgid "Your service will assign `Lesson` instances to `Timeslot` and `Room` instances automatically by using AI to adhere to hard and soft scheduling _constraints_, such as the following examples:"
msgstr "サービスは、ハードおよびソフトスケジューリング_制約_に従い、AI を使用して自動的に `Lesson` インスタンスを `Timeslot` および `Room` インスタンスに割り当てます。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:24
msgid "A room can have at most one lesson at the same time."
msgstr "教室は同時に最大 1 つのレッスンを持つことができます。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:25
msgid "A teacher can teach at most one lesson at the same time."
msgstr "教師は同時に最大 1 つのレッスンを教えることができます。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:26
msgid "A student can attend at most one lesson at the same time."
msgstr "生徒は同時に最大 1 つのレッスンに参加できます。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:27
msgid "A teacher prefers to teach all lessons in the same room."
msgstr "教師はすべてのレッスンを同じ教室で教えることを好みます。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:28
msgid "A teacher prefers to teach sequential lessons and dislikes gaps between lessons."
msgstr "教師は連続してレッスンを教えることを好み、レッスン間に空き時間があることを嫌います。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:29
msgid "A student dislikes sequential lessons on the same subject."
msgstr "生徒は連続して同じテーマのレッスンに出席することを嫌います。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:36
msgid "Mathematically speaking, school timetabling is an _NP-hard_ problem.  This means it is difficult to scale.  Simply brute force iterating through all possible combinations takes millions of years for a non-trivial dataset, even on a supercomputer.  Luckily, AI constraint solvers such as OptaPlanner have advanced algorithms that deliver a near-optimal solution in a reasonable amount of time."
msgstr "数学的に言えば、学校の時間割は _NP-hard_ な問題です。これは、スケーリングが難しいことを意味します。考えられるすべての組み合わせを総当たり攻撃で繰り返すだけでは、スーパーコンピューターであっても重要なデータセットだけで数百万年かかります。幸い、OptaPlanner などの AI 制約ソルバーには、妥当な時間内に最適に近いソリューションを提供できる高度なアルゴリズムがあります。"

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:38
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:42
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:44
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Git リポジトリーのクローンを作成: `git clone{quickstarts-clone-url}`、または {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:46
msgid "The solution is located in {quickstarts-tree-url}/optaplanner-quickstart[the `optaplanner-quickstart` directory]."
msgstr "ソリューションは、{quickstarts-tree-url}/optaplanner-quickstart[the `optaplanner-quickstart` ディレクトリー] にあります。"

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:47
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:53
#, no-wrap
msgid "The build file and the dependencies"
msgstr "ビルドファイルと依存関係"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:57
msgid "Use https://code.quarkus.io/[code.quarkus.io] to generate an application with the following extensions, for Maven or Gradle:"
msgstr "https://code.quarkus.io/[code.quarkus.io] を使用して、Maven または Gradle 用に次の拡張機能を備えたアプリケーションを生成します。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:59
msgid "RESTEasy Reactive (`quarkus-resteasy-reactive`)"
msgstr "RESTEasy Reactive (`quarkus-resteasy-reactive`)"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:60
msgid "RESTEasy Reactive Jackson (`quarkus-resteasy-reactive-jackson`)"
msgstr "RESTEasy Reactive Jackson (`quarkus-resteasy-reactive-jackson`)"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:61
msgid "OptaPlanner (`optaplanner-quarkus`)"
msgstr "OptaPlanner (`optaplanner-quarkus`)"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:62
msgid "OptaPlanner Jackson (`optaplanner-quarkus-jackson`)"
msgstr "OptaPlanner Jackson (`optaplanner-quarkus-jackson`)"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:64
msgid "Alternatively, generate it from the command line:"
msgstr "または、コマンドラインから生成します。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:70
msgid "This will include the following dependencies in your build file:"
msgstr "これには、ビルドファイルの次の依存関係が含まれます。"

#. type: Block title
#: upstream/_guides/optaplanner.adoc:72 upstream/_guides/optaplanner.adoc:726
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:109
#, no-wrap
msgid ""
"<dependencyManagement>\n"
"    <dependencies>\n"
"        <dependency>\n"
"            <groupId>io.quarkus.platform</groupId>\n"
"            <artifactId>quarkus-bom</artifactId>\n"
"            <version>{quarkus-version}</version>\n"
"            <type>pom</type>\n"
"            <scope>import</scope>\n"
"        </dependency>\n"
"        <dependency>\n"
"            <groupId>io.quarkus.platform</groupId>\n"
"            <artifactId>quarkus-optaplanner-bom</artifactId>\n"
"            <version>{quarkus-version}</version>\n"
"            <type>pom</type>\n"
"            <scope>import</scope>\n"
"        </dependency>\n"
"    </dependencies>\n"
"</dependencyManagement>\n"
"<dependencies>\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-resteasy-reactive</artifactId>\n"
"    </dependency>\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-resteasy-reactive-jackson</artifactId>\n"
"    </dependency>\n"
"    <dependency>\n"
"        <groupId>org.optaplanner</groupId>\n"
"        <artifactId>optaplanner-quarkus</artifactId>\n"
"    </dependency>\n"
"    <dependency>\n"
"        <groupId>org.optaplanner</groupId>\n"
"        <artifactId>optaplanner-quarkus-jackson</artifactId>\n"
"    </dependency>\n"
msgstr ""
"<dependencyManagement>\n"
"    <dependencies>\n"
"        <dependency>\n"
"            <groupId>io.quarkus.platform</groupId>\n"
"            <artifactId>quarkus-bom</artifactId>\n"
"            <version>{quarkus-version}</version>\n"
"            <type>pom</type>\n"
"            <scope>import</scope>\n"
"        </dependency>\n"
"        <dependency>\n"
"            <groupId>io.quarkus.platform</groupId>\n"
"            <artifactId>quarkus-optaplanner-bom</artifactId>\n"
"            <version>{quarkus-version}</version>\n"
"            <type>pom</type>\n"
"            <scope>import</scope>\n"
"        </dependency>\n"
"    </dependencies>\n"
"</dependencyManagement>\n"
"<dependencies>\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-resteasy-reactive</artifactId>\n"
"    </dependency>\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-resteasy-reactive-jackson</artifactId>\n"
"    </dependency>\n"
"    <dependency>\n"
"        <groupId>org.optaplanner</groupId>\n"
"        <artifactId>optaplanner-quarkus</artifactId>\n"
"    </dependency>\n"
"    <dependency>\n"
"        <groupId>org.optaplanner</groupId>\n"
"        <artifactId>optaplanner-quarkus-jackson</artifactId>\n"
"    </dependency>\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:116
#, no-wrap
msgid ""
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-junit5</artifactId>\n"
"        <scope>test</scope>\n"
"    </dependency>\n"
"</dependencies>\n"
msgstr ""
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-junit5</artifactId>\n"
"        <scope>test</scope>\n"
"    </dependency>\n"
"</dependencies>\n"

#. type: Block title
#: upstream/_guides/optaplanner.adoc:119 upstream/_guides/optaplanner.adoc:736
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:128
#, no-wrap
msgid ""
"dependencies {\n"
"    implementation enforcedPlatform(\"io.quarkus.platform:quarkus-bom:{quarkus-version}\")\n"
"    implementation enforcedPlatform(\"io.quarkus.platform:quarkus-optaplanner-bom:{quarkus-version}\")\n"
"    implementation 'io.quarkus:quarkus-resteasy-reactive'\n"
"    implementation 'io.quarkus:quarkus-resteasy-reactive-jackson'\n"
"    implementation 'org.optaplanner:optaplanner-quarkus'\n"
"    implementation 'org.optaplanner:optaplanner-quarkus-jackson'\n"
msgstr ""
"dependencies {\n"
"    implementation enforcedPlatform(\"io.quarkus.platform:quarkus-bom:{quarkus-version}\")\n"
"    implementation enforcedPlatform(\"io.quarkus.platform:quarkus-optaplanner-bom:{quarkus-version}\")\n"
"    implementation 'io.quarkus:quarkus-resteasy-reactive'\n"
"    implementation 'io.quarkus:quarkus-resteasy-reactive-jackson'\n"
"    implementation 'org.optaplanner:optaplanner-quarkus'\n"
"    implementation 'org.optaplanner:optaplanner-quarkus-jackson'\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:131
#, no-wrap
msgid ""
"    testImplementation 'io.quarkus:quarkus-junit5'\n"
"}\n"
msgstr ""
"    testImplementation 'io.quarkus:quarkus-junit5'\n"
"}\n"

#
#
#. type: Title ==
#: upstream/_guides/optaplanner.adoc:133
#, no-wrap
msgid "Model the domain objects"
msgstr "ドメインオブジェクトのモデル化"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:137
msgid "Your goal is to assign each lesson to a time slot and a room.  You will create these classes:"
msgstr "目標は、各レッスンをタイムスロットと教室に割り当てることです。次のクラスを作成します。"

#. type: Target for macro image
#: upstream/_guides/optaplanner.adoc:138
#, no-wrap
msgid "optaplanner-time-table-class-diagram-pure.png"
msgstr "optaplanner-time-table-class-diagram-pure.png"

#. type: Title ===
#: upstream/_guides/optaplanner.adoc:140
#, no-wrap
msgid "Timeslot"
msgstr "タイムスロット"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:146
msgid "The `Timeslot` class represents a time interval when lessons are taught, for example, `Monday 10:30 - 11:30` or `Tuesday 13:30 - 14:30`.  For simplicity's sake, all time slots have the same duration and there are no time slots during lunch or other breaks."
msgstr "`Timeslot` クラスは、たとえば `月曜日 10:30 - 11:30` または `火曜日 13:30 - 14:30` のように、レッスンが行われる時間の間隔を表します。簡単にするために、すべてのタイムスロットは同じ時間間隔で、昼食やその他の休憩時間のタイムスロットはありません。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:149
msgid "A time slot has no date, because a high school schedule just repeats every week.  So there is no need for https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#continuousPlanning[continuous planning]."
msgstr "高校の時間割は毎週同じものが繰り返されるため、タイムスロットに日付はありません。したがって、https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#continuousPlanning[継続的な計画作成] は必要ありません。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:151
msgid "Create the `src/main/java/org/acme/optaplanner/domain/Timeslot.java` class:"
msgstr "`src/main/java/org/acme/optaplanner/domain/Timeslot.java` クラスを作成します。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:155 upstream/_guides/optaplanner.adoc:212
#: upstream/_guides/optaplanner.adoc:267 upstream/_guides/optaplanner.adoc:504
#, no-wrap
msgid "package org.acme.optaplanner.domain;\n"
msgstr "package org.acme.optaplanner.domain;\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:158 upstream/_guides/optaplanner.adoc:749
#, no-wrap
msgid ""
"import java.time.DayOfWeek;\n"
"import java.time.LocalTime;\n"
msgstr ""
"import java.time.DayOfWeek;\n"
"import java.time.LocalTime;\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:160
#, no-wrap
msgid "public class Timeslot {\n"
msgstr "public class Timeslot {\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:164
#, no-wrap
msgid ""
"    private DayOfWeek dayOfWeek;\n"
"    private LocalTime startTime;\n"
"    private LocalTime endTime;\n"
msgstr ""
"    private DayOfWeek dayOfWeek;\n"
"    private LocalTime startTime;\n"
"    private LocalTime endTime;\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:167
#, no-wrap
msgid ""
"    public Timeslot() {\n"
"    }\n"
msgstr ""
"    public Timeslot() {\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:173
#, no-wrap
msgid ""
"    public Timeslot(DayOfWeek dayOfWeek, LocalTime startTime, LocalTime endTime) {\n"
"        this.dayOfWeek = dayOfWeek;\n"
"        this.startTime = startTime;\n"
"        this.endTime = endTime;\n"
"    }\n"
msgstr ""
"    public Timeslot(DayOfWeek dayOfWeek, LocalTime startTime, LocalTime endTime) {\n"
"        this.dayOfWeek = dayOfWeek;\n"
"        this.startTime = startTime;\n"
"        this.endTime = endTime;\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:177
#, no-wrap
msgid ""
"    public DayOfWeek getDayOfWeek() {\n"
"        return dayOfWeek;\n"
"    }\n"
msgstr ""
"    public DayOfWeek getDayOfWeek() {\n"
"        return dayOfWeek;\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:181
#, no-wrap
msgid ""
"    public LocalTime getStartTime() {\n"
"        return startTime;\n"
"    }\n"
msgstr ""
"    public LocalTime getStartTime() {\n"
"        return startTime;\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:185
#, no-wrap
msgid ""
"    public LocalTime getEndTime() {\n"
"        return endTime;\n"
"    }\n"
msgstr ""
"    public LocalTime getEndTime() {\n"
"        return endTime;\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:190
#, no-wrap
msgid ""
"    @Override\n"
"    public String toString() {\n"
"        return dayOfWeek + \" \" + startTime;\n"
"    }\n"
msgstr ""
"    @Override\n"
"    public String toString() {\n"
"        return dayOfWeek + \" \" + startTime;\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:192 upstream/_guides/optaplanner.adoc:234
#: upstream/_guides/optaplanner.adoc:335 upstream/_guides/optaplanner.adoc:409
#: upstream/_guides/optaplanner.adoc:482 upstream/_guides/optaplanner.adoc:555
#: upstream/_guides/optaplanner.adoc:648 upstream/_guides/optaplanner.adoc:791
#: upstream/_guides/optaplanner.adoc:881 upstream/_guides/optaplanner.adoc:1035
#: upstream/_guides/optaplanner.adoc:1095
#, no-wrap
msgid "}\n"
msgstr "}\n"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:196
msgid "Because no `Timeslot` instances change during solving, a `Timeslot` is called a _problem fact_.  Such classes do not require any OptaPlanner specific annotations."
msgstr "解決する間は `Timeslot` インスタンスは変更されないため、`Timeslot` は_問題の事実_と呼ばれます。このようなクラスに、OptaPlanner 固有のアノテーションは必要ありません。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:199
msgid "Notice the `toString()` method keeps the output short, so it is easier to read OptaPlanner's `DEBUG` or `TRACE` log, as shown later."
msgstr "`toString()` メソッドは出力を短く保つため、後で示すように、OptaPlanner の`DEBUG` または `TRACE` のログは読みやすくなっています。"

#. type: Title ===
#: upstream/_guides/optaplanner.adoc:200
#, no-wrap
msgid "Room"
msgstr "教室"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:206
msgid "The `Room` class represents a location where lessons are taught, for example, `Room A` or `Room B`.  For simplicity's sake, all rooms are without capacity limits and they can accommodate all lessons."
msgstr "`Room` クラスは、`Room A` や `Room B` のように、レッスンが実施される場所を表します。わかりやすくするために、すべての教室に定員制限はなく、すべてのレッスンに対応できます。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:208
msgid "Create the `src/main/java/org/acme/optaplanner/domain/Room.java` class:"
msgstr "`src/main/java/org/acme/optaplanner/domain/Room.java` クラスを作成します。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:214
#, no-wrap
msgid "public class Room {\n"
msgstr "public class Room {\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:216
#, no-wrap
msgid "    private String name;\n"
msgstr "    private String name;\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:219
#, no-wrap
msgid ""
"    public Room() {\n"
"    }\n"
msgstr ""
"    public Room() {\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:223
#, no-wrap
msgid ""
"    public Room(String name) {\n"
"        this.name = name;\n"
"    }\n"
msgstr ""
"    public Room(String name) {\n"
"        this.name = name;\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:227
#, no-wrap
msgid ""
"    public String getName() {\n"
"        return name;\n"
"    }\n"
msgstr ""
"    public String getName() {\n"
"        return name;\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:232
#, no-wrap
msgid ""
"    @Override\n"
"    public String toString() {\n"
"        return name;\n"
"    }\n"
msgstr ""
"    @Override\n"
"    public String toString() {\n"
"        return name;\n"
"    }\n"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:237
msgid "`Room` instances do not change during solving, so `Room` is also a _problem fact_."
msgstr "解決の間、`Room` インスタンスは変更されないため、`Room`も_問題の事実_です。"

#. type: Title ===
#: upstream/_guides/optaplanner.adoc:238
#, no-wrap
msgid "Lesson"
msgstr "レッスン"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:246
msgid "During a lesson, represented by the `Lesson` class, a teacher teaches a subject to a group of students, for example, `Math by A.Turing for 9th grade` or `Chemistry by M.Curie for 10th grade`.  If a subject is taught multiple times per week by the same teacher to the same student group, there are multiple `Lesson` instances that are only distinguishable by `id`.  For example, the 9th grade has six math lessons a week."
msgstr "`Lesson` クラスで表されるレッスンでは、`Math by A.Turing for 9th grade` または `Chemistry by M.Curie for 10th grade` のように、教師は生徒グループにいずれかの教科を教えます。同じ教師が週に複数回、その教科を同じ生徒グループに教える場合、`id` のみ異なる複数の `Lesson` インスタンスがあります。たとえば、9 年生には週に 6 回の数学の授業があります。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:250
msgid "During solving, OptaPlanner changes the `timeslot` and `room` fields of the `Lesson` class, to assign each lesson to a time slot and a room.  Because OptaPlanner changes these fields, `Lesson` is a _planning entity_:"
msgstr "解決中に、OptaPlanner は `Lesson` クラスの `timeslot` フィールドと `room` フィールドを変更し、各レッスンをタイムスロットと教室に割り当てます。OptaPlanner はこれらのフィールドを変更するため、`Lesson`は_プランニングエンティティー_です。"

#. type: Target for macro image
#: upstream/_guides/optaplanner.adoc:251
#, no-wrap
msgid "optaplanner-time-table-class-diagram-annotated.png"
msgstr "optaplanner-time-table-class-diagram-annotated.png"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:261
msgid "Most of the fields in the previous diagram contain input data, except for the orange fields: A lesson's `timeslot` and `room` fields are unassigned (`null`) in the input data and assigned (not `null`) in the output data.  OptaPlanner changes these fields during solving.  Such fields are called planning variables.  In order for OptaPlanner to recognize them, both the `timeslot` and `room` fields require an `@PlanningVariable` annotation.  Their containing class, `Lesson`, requires an `@PlanningEntity` annotation."
msgstr "前の図のほとんどのフィールドには、オレンジ色のフィールドを除いて、入力データが含まれています。レッスンの `timeslot` フィールドと `room` フィールドは、入力データでは割り当てられておらず (`null`)、出力データでは割り当てられています (非 `null`)。OptaPlanner は、解決中にこれらのフィールドを変更します。このようなフィールドは、プランニング変数と呼ばれます。OptaPlanner がそれらを認識するためには、`timeslot` フィールドと `room` フィールドの両方に `@PlanningVariable` アノテーションが必要です。それらを含むクラス `Lesson` には、`@PlanningEntity`アノテーションが必要です。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:263
msgid "Create the `src/main/java/org/acme/optaplanner/domain/Lesson.java` class:"
msgstr "`src/main/java/org/acme/optaplanner/domain/Lesson.java` クラスを作成します。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:271
#, no-wrap
msgid ""
"import org.optaplanner.core.api.domain.entity.PlanningEntity;\n"
"import org.optaplanner.core.api.domain.lookup.PlanningId;\n"
"import org.optaplanner.core.api.domain.variable.PlanningVariable;\n"
msgstr ""
"import org.optaplanner.core.api.domain.entity.PlanningEntity;\n"
"import org.optaplanner.core.api.domain.lookup.PlanningId;\n"
"import org.optaplanner.core.api.domain.variable.PlanningVariable;\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:274
#, no-wrap
msgid ""
"@PlanningEntity\n"
"public class Lesson {\n"
msgstr ""
"@PlanningEntity\n"
"public class Lesson {\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:277
#, no-wrap
msgid ""
"    @PlanningId\n"
"    private Long id;\n"
msgstr ""
"    @PlanningId\n"
"    private Long id;\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:281
#, no-wrap
msgid ""
"    private String subject;\n"
"    private String teacher;\n"
"    private String studentGroup;\n"
msgstr ""
"    private String subject;\n"
"    private String teacher;\n"
"    private String studentGroup;\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:286
#, no-wrap
msgid ""
"    @PlanningVariable(valueRangeProviderRefs = \"timeslotRange\")\n"
"    private Timeslot timeslot;\n"
"    @PlanningVariable(valueRangeProviderRefs = \"roomRange\")\n"
"    private Room room;\n"
msgstr ""
"    @PlanningVariable(valueRangeProviderRefs = \"timeslotRange\")\n"
"    private Timeslot timeslot;\n"
"    @PlanningVariable(valueRangeProviderRefs = \"roomRange\")\n"
"    private Room room;\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:289
#, no-wrap
msgid ""
"    public Lesson() {\n"
"    }\n"
msgstr ""
"    public Lesson() {\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:296
#, no-wrap
msgid ""
"    public Lesson(Long id, String subject, String teacher, String studentGroup) {\n"
"        this.id = id;\n"
"        this.subject = subject;\n"
"        this.teacher = teacher;\n"
"        this.studentGroup = studentGroup;\n"
"    }\n"
msgstr ""
"    public Lesson(Long id, String subject, String teacher, String studentGroup) {\n"
"        this.id = id;\n"
"        this.subject = subject;\n"
"        this.teacher = teacher;\n"
"        this.studentGroup = studentGroup;\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:300
#, no-wrap
msgid ""
"    public Long getId() {\n"
"        return id;\n"
"    }\n"
msgstr ""
"    public Long getId() {\n"
"        return id;\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:304
#, no-wrap
msgid ""
"    public String getSubject() {\n"
"        return subject;\n"
"    }\n"
msgstr ""
"    public String getSubject() {\n"
"        return subject;\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:308
#, no-wrap
msgid ""
"    public String getTeacher() {\n"
"        return teacher;\n"
"    }\n"
msgstr ""
"    public String getTeacher() {\n"
"        return teacher;\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:312
#, no-wrap
msgid ""
"    public String getStudentGroup() {\n"
"        return studentGroup;\n"
"    }\n"
msgstr ""
"    public String getStudentGroup() {\n"
"        return studentGroup;\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:316
#, no-wrap
msgid ""
"    public Timeslot getTimeslot() {\n"
"        return timeslot;\n"
"    }\n"
msgstr ""
"    public Timeslot getTimeslot() {\n"
"        return timeslot;\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:320
#, no-wrap
msgid ""
"    public void setTimeslot(Timeslot timeslot) {\n"
"        this.timeslot = timeslot;\n"
"    }\n"
msgstr ""
"    public void setTimeslot(Timeslot timeslot) {\n"
"        this.timeslot = timeslot;\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:324
#, no-wrap
msgid ""
"    public Room getRoom() {\n"
"        return room;\n"
"    }\n"
msgstr ""
"    public Room getRoom() {\n"
"        return room;\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:328
#, no-wrap
msgid ""
"    public void setRoom(Room room) {\n"
"        this.room = room;\n"
"    }\n"
msgstr ""
"    public void setRoom(Room room) {\n"
"        this.room = room;\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:333
#, no-wrap
msgid ""
"    @Override\n"
"    public String toString() {\n"
"        return subject + \"(\" + id + \")\";\n"
"    }\n"
msgstr ""
"    @Override\n"
"    public String toString() {\n"
"        return subject + \"(\" + id + \")\";\n"
"    }\n"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:340
msgid "The `Lesson` class has an `@PlanningEntity` annotation, so OptaPlanner knows that this class changes during solving because it contains one or more planning variables."
msgstr "`Lesson` クラスには `@PlanningEntity` アノテーションがあり、このクラスには 1 つ以上のプランニング変数が含まれているため、OptaPlanner はこのクラスが解決中に変更されることを認識しています。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:346
msgid "The `timeslot` field has an `@PlanningVariable` annotation, so OptaPlanner knows that it can change its value.  In order to find potential `Timeslot` instances to assign to this field, OptaPlanner uses the `valueRangeProviderRefs` property to connect to a value range provider (explained later) that provides a `List<Timeslot>` to pick from."
msgstr "`timeslot` フィールドには `@PlanningVariable` アノテーションがあるため、OptaPlanner はその値を変更できることを認識しています。このフィールドに割り当てる可能性のある `Timeslot` インスタンスを見つけるために、OptaPlanner は `valueRangeProviderRefs` プロパティーを使用して、選択元となる `List<Timeslot>` を提供する値の範囲プロバイダー (後で説明) に接続します。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:348
msgid "The `room` field also has an `@PlanningVariable` annotation, for the same reasons."
msgstr "同じ理由で、`room` フィールドにも `@PlanningVariable` アノテーションがあります。"

#. type: delimited block =
#: upstream/_guides/optaplanner.adoc:355
msgid "Determining the `@PlanningVariable` fields for an arbitrary constraint solving use case is often challenging the first time.  Read https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#domainModelingGuide[the domain modeling guidelines] to avoid common pitfalls."
msgstr "任意制約解決のユースケースの `@PlanningVariable` フィールドを初めて決定する場合、それは簡単ではありません。一般的な落とし穴を避けるために、https://docs.optaplanner.org/latestFinal/optaplanner-docs/html_single/index.html#domainModelingGuide[ドメインのモデル化ガイドライン] をお読みください。"

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:357
#, no-wrap
msgid "Define the constraints and calculate the score"
msgstr "制約の定義とスコアの計算"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:363
msgid "A _score_ represents the quality of a specific solution.  The higher the better.  OptaPlanner looks for the best solution, which is the solution with the highest score found in the available time.  It might be the _optimal_ solution."
msgstr "_スコア_は、特定のソリューションの品質を表します。スコアが高ければ、品質が高いことを表しています。OptaPlanner は、最良のソリューションとして、使用できる時間内に見つかった最高スコアのソリューションを探します。それは_最適_なソリューションかもしれません。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:366
msgid "Because this use case has hard and soft constraints, use the `HardSoftScore` class to represent the score:"
msgstr "このユースケースにはハードとソフトの制約があるため、スコアを表すためには `HardSoftScore` クラスを使用します。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:368
msgid "Hard constraints must not be broken. For example: _A room can have at most one lesson at the same time._"
msgstr "ハード制約を破ってはいけません。例: _教室は同時に最大 1 つのレッスンを持つことができます。_"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:369
msgid "Soft constraints should not be broken. For example: _A teacher prefers to teach in a single room._"
msgstr "ソフト制約を破ってはいけません。例:_教師は 1 つの教室で教えることを好みます。_"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:373
msgid "Hard constraints are weighted against other hard constraints.  Soft constraints are weighted too, against other soft constraints.  *Hard constraints always outweigh soft constraints*, regardless of their respective weights."
msgstr "ハード制約は、他のハード制約に対して重み付けされます。ソフト制約も、他のソフト制約に対して重み付けされます。*それぞれの重みに関係なく、ハード制約は常にソフト制約の重みを上回ります*。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:375
msgid "To calculate the score, you could implement an `EasyScoreCalculator` class:"
msgstr "スコアを計算するには、`EasyScoreCalculator` クラスを実装します。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:379
#, no-wrap
msgid "public class TimeTableEasyScoreCalculator implements EasyScoreCalculator<TimeTable, HardSoftScore> {\n"
msgstr "public class TimeTableEasyScoreCalculator implements EasyScoreCalculator<TimeTable, HardSoftScore> {\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:407
#, no-wrap
msgid ""
"    @Override\n"
"    public HardSoftScore calculateScore(TimeTable timeTable) {\n"
"        List<Lesson> lessonList = timeTable.getLessonList();\n"
"        int hardScore = 0;\n"
"        for (Lesson a : lessonList) {\n"
"            for (Lesson b : lessonList) {\n"
"                if (a.getTimeslot() != null && a.getTimeslot().equals(b.getTimeslot())\n"
"                        && a.getId() < b.getId()) {\n"
"                    // A room can accommodate at most one lesson at the same time.\n"
"                    if (a.getRoom() != null && a.getRoom().equals(b.getRoom())) {\n"
"                        hardScore--;\n"
"                    }\n"
"                    // A teacher can teach at most one lesson at the same time.\n"
"                    if (a.getTeacher().equals(b.getTeacher())) {\n"
"                        hardScore--;\n"
"                    }\n"
"                    // A student can attend at most one lesson at the same time.\n"
"                    if (a.getStudentGroup().equals(b.getStudentGroup())) {\n"
"                        hardScore--;\n"
"                    }\n"
"                }\n"
"            }\n"
"        }\n"
"        int softScore = 0;\n"
"        // Soft constraints are only implemented in the optaplanner-quickstarts code\n"
"        return HardSoftScore.of(hardScore, softScore);\n"
"    }\n"
msgstr ""
"    @Override\n"
"    public HardSoftScore calculateScore(TimeTable timeTable) {\n"
"        List<Lesson> lessonList = timeTable.getLessonList();\n"
"        int hardScore = 0;\n"
"        for (Lesson a : lessonList) {\n"
"            for (Lesson b : lessonList) {\n"
"                if (a.getTimeslot() != null && a.getTimeslot().equals(b.getTimeslot())\n"
"                        && a.getId() < b.getId()) {\n"
"                    // A room can accommodate at most one lesson at the same time.\n"
"                    if (a.getRoom() != null && a.getRoom().equals(b.getRoom())) {\n"
"                        hardScore--;\n"
"                    }\n"
"                    // A teacher can teach at most one lesson at the same time.\n"
"                    if (a.getTeacher().equals(b.getTeacher())) {\n"
"                        hardScore--;\n"
"                    }\n"
"                    // A student can attend at most one lesson at the same time.\n"
"                    if (a.getStudentGroup().equals(b.getStudentGroup())) {\n"
"                        hardScore--;\n"
"                    }\n"
"                }\n"
"            }\n"
"        }\n"
"        int softScore = 0;\n"
"        // Soft constraints are only implemented in the optaplanner-quickstarts code\n"
"        return HardSoftScore.of(hardScore, softScore);\n"
"    }\n"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:414
msgid "Unfortunately **that does not scale well**, because it is non-incremental: every time a lesson is assigned to a different time slot or room, all lessons are re-evaluated to calculate the new score."
msgstr "残念ながら、増分ではないため、**それはうまくスケーリングされません**。レッスンが異なるタイムスロットまたは教室に割り当てられるたびに、すべてのレッスンが再評価されて新しいスコアが計算されます。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:418
msgid "Instead, create a `src/main/java/org/acme/optaplanner/solver/TimeTableConstraintProvider.java` class to perform incremental score calculation.  It uses OptaPlanner's ConstraintStream API which is inspired by Java Streams and SQL:"
msgstr "代わりに、`src/main/java/org/acme/optaplanner/solutioner/TimeTableConstraintProvider.java` クラスを作成して、増分スコア計算を実行します。これは、JavaStreams と SQL に触発された OptaPlanner の ConstraintStreamAPI を使用します。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:422 upstream/_guides/optaplanner.adoc:746
#, no-wrap
msgid "package org.acme.optaplanner.solver;\n"
msgstr "package org.acme.optaplanner.solver;\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:429
#, no-wrap
msgid ""
"import org.acme.optaplanner.domain.Lesson;\n"
"import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;\n"
"import org.optaplanner.core.api.score.stream.Constraint;\n"
"import org.optaplanner.core.api.score.stream.ConstraintFactory;\n"
"import org.optaplanner.core.api.score.stream.ConstraintProvider;\n"
"import org.optaplanner.core.api.score.stream.Joiners;\n"
msgstr ""
"import org.acme.optaplanner.domain.Lesson;\n"
"import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;\n"
"import org.optaplanner.core.api.score.stream.Constraint;\n"
"import org.optaplanner.core.api.score.stream.ConstraintFactory;\n"
"import org.optaplanner.core.api.score.stream.ConstraintProvider;\n"
"import org.optaplanner.core.api.score.stream.Joiners;\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:431
#, no-wrap
msgid "public class TimeTableConstraintProvider implements ConstraintProvider {\n"
msgstr "public class TimeTableConstraintProvider implements ConstraintProvider {\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:442
#, no-wrap
msgid ""
"    @Override\n"
"    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n"
"        return new Constraint[] {\n"
"                // Hard constraints\n"
"                roomConflict(constraintFactory),\n"
"                teacherConflict(constraintFactory),\n"
"                studentGroupConflict(constraintFactory),\n"
"                // Soft constraints are only implemented in the optaplanner-quickstarts code\n"
"        };\n"
"    }\n"
msgstr ""
"    @Override\n"
"    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n"
"        return new Constraint[] {\n"
"                // Hard constraints\n"
"                roomConflict(constraintFactory),\n"
"                teacherConflict(constraintFactory),\n"
"                studentGroupConflict(constraintFactory),\n"
"                // Soft constraints are only implemented in the optaplanner-quickstarts code\n"
"        };\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:445
#, no-wrap
msgid ""
"    Constraint roomConflict(ConstraintFactory constraintFactory) {\n"
"        // A room can accommodate at most one lesson at the same time.\n"
msgstr ""
"    Constraint roomConflict(ConstraintFactory constraintFactory) {\n"
"        // A room can accommodate at most one lesson at the same time.\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:460
#, no-wrap
msgid ""
"        // Select a lesson ...\n"
"        return constraintFactory\n"
"                .forEach(Lesson.class)\n"
"                // ... and pair it with another lesson ...\n"
"                .join(Lesson.class,\n"
"                        // ... in the same timeslot ...\n"
"                        Joiners.equal(Lesson::getTimeslot),\n"
"                        // ... in the same room ...\n"
"                        Joiners.equal(Lesson::getRoom),\n"
"                        // ... and the pair is unique (different id, no reverse pairs) ...\n"
"                        Joiners.lessThan(Lesson::getId))\n"
"                // ... then penalize each pair with a hard weight.\n"
"                .penalize(\"Room conflict\", HardSoftScore.ONE_HARD);\n"
"    }\n"
msgstr ""
"        // Select a lesson ...\n"
"        return constraintFactory\n"
"                .forEach(Lesson.class)\n"
"                // ... and pair it with another lesson ...\n"
"                .join(Lesson.class,\n"
"                        // ... in the same timeslot ...\n"
"                        Joiners.equal(Lesson::getTimeslot),\n"
"                        // ... in the same room ...\n"
"                        Joiners.equal(Lesson::getRoom),\n"
"                        // ... and the pair is unique (different id, no reverse pairs) ...\n"
"                        Joiners.lessThan(Lesson::getId))\n"
"                // ... then penalize each pair with a hard weight.\n"
"                .penalize(\"Room conflict\", HardSoftScore.ONE_HARD);\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:470
#, no-wrap
msgid ""
"    Constraint teacherConflict(ConstraintFactory constraintFactory) {\n"
"        // A teacher can teach at most one lesson at the same time.\n"
"        return constraintFactory.forEach(Lesson.class)\n"
"                .join(Lesson.class,\n"
"                        Joiners.equal(Lesson::getTimeslot),\n"
"                        Joiners.equal(Lesson::getTeacher),\n"
"                        Joiners.lessThan(Lesson::getId))\n"
"                .penalize(\"Teacher conflict\", HardSoftScore.ONE_HARD);\n"
"    }\n"
msgstr ""
"    Constraint teacherConflict(ConstraintFactory constraintFactory) {\n"
"        // A teacher can teach at most one lesson at the same time.\n"
"        return constraintFactory.forEach(Lesson.class)\n"
"                .join(Lesson.class,\n"
"                        Joiners.equal(Lesson::getTimeslot),\n"
"                        Joiners.equal(Lesson::getTeacher),\n"
"                        Joiners.lessThan(Lesson::getId))\n"
"                .penalize(\"Teacher conflict\", HardSoftScore.ONE_HARD);\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:480
#, no-wrap
msgid ""
"    Constraint studentGroupConflict(ConstraintFactory constraintFactory) {\n"
"        // A student can attend at most one lesson at the same time.\n"
"        return constraintFactory.forEach(Lesson.class)\n"
"                .join(Lesson.class,\n"
"                        Joiners.equal(Lesson::getTimeslot),\n"
"                        Joiners.equal(Lesson::getStudentGroup),\n"
"                        Joiners.lessThan(Lesson::getId))\n"
"                .penalize(\"Student group conflict\", HardSoftScore.ONE_HARD);\n"
"    }\n"
msgstr ""
"    Constraint studentGroupConflict(ConstraintFactory constraintFactory) {\n"
"        // A student can attend at most one lesson at the same time.\n"
"        return constraintFactory.forEach(Lesson.class)\n"
"                .join(Lesson.class,\n"
"                        Joiners.equal(Lesson::getTimeslot),\n"
"                        Joiners.equal(Lesson::getStudentGroup),\n"
"                        Joiners.lessThan(Lesson::getId))\n"
"                .penalize(\"Student group conflict\", HardSoftScore.ONE_HARD);\n"
"    }\n"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:485
msgid "The `ConstraintProvider` scales an order of magnitude better than the `EasyScoreCalculator`: __O__(n) instead of __O__(n²)."
msgstr "`ConstraintProvider` は、のスケーリングは `EasyScoreCalculator` より桁違いに優れており、__O__(n²) ではなく __O __(n) です。"

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:486
#, no-wrap
msgid "Gather the domain objects in a planning solution"
msgstr "プランニングソリューションでドメインオブジェクトを収集します"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:491
msgid "A `TimeTable` wraps all `Timeslot`, `Room`, and `Lesson` instances of a single dataset.  Furthermore, because it contains all lessons, each with a specific planning variable state, it is a _planning solution_ and it has a score:"
msgstr "`TimeTable` は、単一データセットのすべての `Timeslot`、`Room`、および `Lesson` インスタンスをラップします。さらに、これにはすべてのレッスンが含まれており、各レッスンには特定のプランニング変数があるため、これは_plannning solution_であり、スコアがあります。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:494
msgid "If lessons are still unassigned, then it is an _uninitialized_ solution, for example, a solution with the score `-4init/0hard/0soft`."
msgstr "レッスンがまだ割り当てられていない場合、それは _uninitialized_ ソリューションです。たとえば、スコアが `-4init/0hard/0soft` のソリューションです。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:496
msgid "If it breaks hard constraints, then it is an _infeasible_ solution, for example, a solution with the score `-2hard/-3soft`."
msgstr "ハード制約を破る場合、それは _infeasible_ ソリューションです。たとえば、スコアが `-2hard/-3soft` のソリューションです。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:498
msgid "If it adheres to all hard constraints, then it is a _feasible_ solution, for example, a solution with the score `0hard/-7soft`."
msgstr "すべてのハード制約に準拠している場合、それは _feasible_ ソリューションです。たとえば、スコアが `0hard/-7soft` のソリューションです。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:500
msgid "Create the `src/main/java/org/acme/optaplanner/domain/TimeTable.java` class:"
msgstr "`src/main/java/org/acme/optaplanner/domain/TimeTable.java` クラスを作成します。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:506
#, no-wrap
msgid "import java.util.List;\n"
msgstr "import java.util.List;\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:513
#, no-wrap
msgid ""
"import org.optaplanner.core.api.domain.solution.PlanningEntityCollectionProperty;\n"
"import org.optaplanner.core.api.domain.solution.PlanningScore;\n"
"import org.optaplanner.core.api.domain.solution.PlanningSolution;\n"
"import org.optaplanner.core.api.domain.solution.ProblemFactCollectionProperty;\n"
"import org.optaplanner.core.api.domain.valuerange.ValueRangeProvider;\n"
"import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;\n"
msgstr ""
"import org.optaplanner.core.api.domain.solution.PlanningEntityCollectionProperty;\n"
"import org.optaplanner.core.api.domain.solution.PlanningScore;\n"
"import org.optaplanner.core.api.domain.solution.PlanningSolution;\n"
"import org.optaplanner.core.api.domain.solution.ProblemFactCollectionProperty;\n"
"import org.optaplanner.core.api.domain.valuerange.ValueRangeProvider;\n"
"import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:516
#, no-wrap
msgid ""
"@PlanningSolution\n"
"public class TimeTable {\n"
msgstr ""
"@PlanningSolution\n"
"public class TimeTable {\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:525
#, no-wrap
msgid ""
"    @ValueRangeProvider(id = \"timeslotRange\")\n"
"    @ProblemFactCollectionProperty\n"
"    private List<Timeslot> timeslotList;\n"
"    @ValueRangeProvider(id = \"roomRange\")\n"
"    @ProblemFactCollectionProperty\n"
"    private List<Room> roomList;\n"
"    @PlanningEntityCollectionProperty\n"
"    private List<Lesson> lessonList;\n"
msgstr ""
"    @ValueRangeProvider(id = \"timeslotRange\")\n"
"    @ProblemFactCollectionProperty\n"
"    private List<Timeslot> timeslotList;\n"
"    @ValueRangeProvider(id = \"roomRange\")\n"
"    @ProblemFactCollectionProperty\n"
"    private List<Room> roomList;\n"
"    @PlanningEntityCollectionProperty\n"
"    private List<Lesson> lessonList;\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:528
#, no-wrap
msgid ""
"    @PlanningScore\n"
"    private HardSoftScore score;\n"
msgstr ""
"    @PlanningScore\n"
"    private HardSoftScore score;\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:531
#, no-wrap
msgid ""
"    public TimeTable() {\n"
"    }\n"
msgstr ""
"    public TimeTable() {\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:537
#, no-wrap
msgid ""
"    public TimeTable(List<Timeslot> timeslotList, List<Room> roomList, List<Lesson> lessonList) {\n"
"        this.timeslotList = timeslotList;\n"
"        this.roomList = roomList;\n"
"        this.lessonList = lessonList;\n"
"    }\n"
msgstr ""
"    public TimeTable(List<Timeslot> timeslotList, List<Room> roomList, List<Lesson> lessonList) {\n"
"        this.timeslotList = timeslotList;\n"
"        this.roomList = roomList;\n"
"        this.lessonList = lessonList;\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:541
#, no-wrap
msgid ""
"    public List<Timeslot> getTimeslotList() {\n"
"        return timeslotList;\n"
"    }\n"
msgstr ""
"    public List<Timeslot> getTimeslotList() {\n"
"        return timeslotList;\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:545
#, no-wrap
msgid ""
"    public List<Room> getRoomList() {\n"
"        return roomList;\n"
"    }\n"
msgstr ""
"    public List<Room> getRoomList() {\n"
"        return roomList;\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:549
#, no-wrap
msgid ""
"    public List<Lesson> getLessonList() {\n"
"        return lessonList;\n"
"    }\n"
msgstr ""
"    public List<Lesson> getLessonList() {\n"
"        return lessonList;\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:553
#, no-wrap
msgid ""
"    public HardSoftScore getScore() {\n"
"        return score;\n"
"    }\n"
msgstr ""
"    public HardSoftScore getScore() {\n"
"        return score;\n"
"    }\n"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:559
msgid "The `TimeTable` class has an `@PlanningSolution` annotation, so OptaPlanner knows that this class contains all of the input and output data."
msgstr "`TimeTable` クラスには `@PlanningSolution` アノテーションがあるため、OptaPlanner は、このクラスにすべての入力データと出力データが含まれていることを認識します。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:561
msgid "Specifically, this class is the input of the problem:"
msgstr "具体的には、このクラスは問題の入力です。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:563
msgid "A `timeslotList` field with all time slots"
msgstr "すべてのタイムスロットを含む `timeslotList` フィールド"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:564 upstream/_guides/optaplanner.adoc:566
msgid "This is a list of problem facts, because they do not change during solving."
msgstr "解決中に変更されないため、これは問題の事実のリストです。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:565
msgid "A `roomList` field with all rooms"
msgstr "すべての教室を含む `roomList` フィールド"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:567
msgid "A `lessonList` field with all lessons"
msgstr "すべてのレッスンを含む `lessonList` フィールド"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:568
msgid "This is a list of planning entities, because they change during solving."
msgstr "解決中に変更されるため、これはプランニングエンティティーのリストです。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:569
msgid "Of each `Lesson`:"
msgstr "各 `レッスン` の:"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:571
msgid "The values of the `timeslot` and `room` fields are typically still `null`, so unassigned.  They are planning variables."
msgstr "`timeslot` フィールドと `room` フィールドの値は、通常の場合はまだ `null` であるため割り当てられていません。それはプランニング変数です。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:573
msgid "The other fields, such as `subject`, `teacher` and `studentGroup`, are filled in.  These fields are problem properties."
msgstr "`subject`、`Teacher`、`studentGroup` などの他のフィールドが入力されます。これらのフィールドは、問題のプロパティーです。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:575
msgid "However, this class is also the output of the solution:"
msgstr "ただし、このクラスはソリューションの出力でもあります。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:577
msgid "A `lessonList` field for which each `Lesson` instance has non-null `timeslot` and `room` fields after solving"
msgstr "解決した後、各 `Lesson` インスタンスに null 以外の `timeslot` フィールドと `room` フィールドがある `lessonList` フィールド"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:578
msgid "A `score` field that represents the quality of the output solution, for example, `0hard/-5soft`"
msgstr "出力ソリューションの品質を表す `score` フィールド (例: `0hard/-5soft`)"

#. type: Title ===
#: upstream/_guides/optaplanner.adoc:579
#, no-wrap
msgid "The value range providers"
msgstr "値の範囲プロバイダー"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:585
msgid "The `timeslotList` field is a value range provider.  It holds the `Timeslot` instances which OptaPlanner can pick from to assign to the `timeslot` field of `Lesson` instances.  The `timeslotList` field has an `@ValueRangeProvider` annotation to connect the `@PlanningVariable` with the `@ValueRangeProvider`, by matching the value of the `id` property with the value of the `valueRangeProviderRefs` property of the `@PlanningVariable` annotation in the `Lesson` class."
msgstr "`timeslotList` フィールドは値の範囲プロバイダーです。これは、OptaPlanner が`Lesson` インスタンスの `timeslot` フィールドに割り当てるために選択でき る`Timeslot` インスタンスを保持します。`timeslotList` フィールドには `@ValueRangeProvider` アノテーションがあり、`id` プロパティーの値を `Lesson` クラスの `@PlanningVariable` アノテーションの `valueRangeProviderRefs` プロパティーの値と照合することにより、`@PlanningVariable` を `@ValueRangeProvider` に接続します。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:587
msgid "Following the same logic, the `roomList` field also has an `@ValueRangeProvider` annotation."
msgstr "同じロジックに従って、`roomList` フィールドにも `@ValueRangeProvider` アノテーションがあります。"

#. type: Title ===
#: upstream/_guides/optaplanner.adoc:588
#, no-wrap
msgid "The problem fact and planning entity properties"
msgstr "問題の事実とプランニングエンティティーのプロパティー"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:593
msgid "Furthermore, OptaPlanner needs to know which `Lesson` instances it can change as well as how to retrieve the `Timeslot` and `Room` instances used for score calculation by your `TimeTableConstraintProvider`."
msgstr "さらに、OptaPlanner は、変更できる `Lesson` インスタンスと、`TimeTableConstraintProvider` がスコア計算に使用する `Timeslot` および `Room` インスタンスを取得する方法を知る必要があります。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:596
msgid "The `timeslotList` and `roomList` fields have an `@ProblemFactCollectionProperty` annotation, so your `TimeTableConstraintProvider` can select _from_ those instances."
msgstr "`timeslotList` フィールドと `roomList` フィールドには `@ProblemFactCollectionProperty` アノテーションがあるため、`TimeTableConstraintProvider` はこれらのインスタンス_から_選択できます。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:600
msgid "The `lessonList` has an `@PlanningEntityCollectionProperty` annotation, so OptaPlanner can change them during solving and your `TimeTableConstraintProvider` can select _from_ those too."
msgstr "`lessonList` には `@PlanningEntityCollectionProperty` アノテーションがあるため、OptaPlanner は解決中にそれらを変更でき、`TimeTableConstraintProvider` はそれら_から_も選択できます。"

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:601
#, no-wrap
msgid "Create the solver service"
msgstr "ソルバーサービスの作成"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:608
msgid "Now you are ready to put everything together and create a REST service.  But solving planning problems on REST threads causes HTTP timeout issues.  Therefore, the Quarkus extension injects a `SolverManager` instance, which runs solvers in a separate thread pool and can solve multiple datasets in parallel."
msgstr "これで、すべてをまとめて REST サービスを作成する準備が整いました。ただし、REST スレッドの planning problem を解決すると、HTTP タイムアウトの問題が発生します。したがって、Quarkus エクステンションは `SolverManager` インスタンスを挿入します。これにより、別のスレッドプールでソルバーが実行され、複数のデータセットを並行して解決できます。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:610
msgid "Create the `src/main/java/org/acme/optaplanner/rest/TimeTableResource.java` class:"
msgstr "`src/main/java/org/acme/optaplanner/rest/TimeTableResource.java` クラスを作成します。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:614 upstream/_guides/optaplanner.adoc:812
#: upstream/_guides/optaplanner.adoc:954 upstream/_guides/optaplanner.adoc:1055
#, no-wrap
msgid "package org.acme.optaplanner.rest;\n"
msgstr "package org.acme.optaplanner.rest;\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:620
#, no-wrap
msgid ""
"import java.util.UUID;\n"
"import java.util.concurrent.ExecutionException;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
msgstr ""
"import java.util.UUID;\n"
"import java.util.concurrent.ExecutionException;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:624
#, no-wrap
msgid ""
"import org.acme.optaplanner.domain.TimeTable;\n"
"import org.optaplanner.core.api.solver.SolverJob;\n"
"import org.optaplanner.core.api.solver.SolverManager;\n"
msgstr ""
"import org.acme.optaplanner.domain.TimeTable;\n"
"import org.optaplanner.core.api.solver.SolverJob;\n"
"import org.optaplanner.core.api.solver.SolverManager;\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:627 upstream/_guides/optaplanner.adoc:973
#, no-wrap
msgid ""
"@Path(\"/timeTable\")\n"
"public class TimeTableResource {\n"
msgstr ""
"@Path(\"/timeTable\")\n"
"public class TimeTableResource {\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:630
#, no-wrap
msgid ""
"    @Inject\n"
"    SolverManager<TimeTable, UUID> solverManager;\n"
msgstr ""
"    @Inject\n"
"    SolverManager<TimeTable, UUID> solverManager;\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:646
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/solve\")\n"
"    public TimeTable solve(TimeTable problem) {\n"
"        UUID problemId = UUID.randomUUID();\n"
"        // Submit the problem to start solving\n"
"        SolverJob<TimeTable, UUID> solverJob = solverManager.solve(problemId, problem);\n"
"        TimeTable solution;\n"
"        try {\n"
"            // Wait until the solving ends\n"
"            solution = solverJob.getFinalBestSolution();\n"
"        } catch (InterruptedException | ExecutionException e) {\n"
"            throw new IllegalStateException(\"Solving failed.\", e);\n"
"        }\n"
"        return solution;\n"
"    }\n"
msgstr ""
"    @POST\n"
"    @Path(\"/solve\")\n"
"    public TimeTable solve(TimeTable problem) {\n"
"        UUID problemId = UUID.randomUUID();\n"
"        // Submit the problem to start solving\n"
"        SolverJob<TimeTable, UUID> solverJob = solverManager.solve(problemId, problem);\n"
"        TimeTable solution;\n"
"        try {\n"
"            // Wait until the solving ends\n"
"            solution = solverJob.getFinalBestSolution();\n"
"        } catch (InterruptedException | ExecutionException e) {\n"
"            throw new IllegalStateException(\"Solving failed.\", e);\n"
"        }\n"
"        return solution;\n"
"    }\n"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:653
msgid "For simplicity's sake, this initial implementation waits for the solver to finish, which can still cause an HTTP timeout.  The _complete_ implementation avoids HTTP timeouts much more elegantly."
msgstr "分かりやすくするために、この最初の実装はソルバーが終了するのを待ちますが、それでも HTTP タイムアウトが発生する可能性があります。_完全な_実装では、HTTP タイムアウトはさらにスムーズに回避されます。"

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:654
#, no-wrap
msgid "Set the termination time"
msgstr "終了時刻の設定"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:659
msgid "Without a termination setting or a termination event, the solver runs forever.  To avoid that, limit the solving time to five seconds.  That is short enough to avoid the HTTP timeout."
msgstr "終了設定または終了イベントがない場合、ソルバーは永久に実行されます。これを回避するには、解決時間を 5 秒に制限します。これは、HTTP タイムアウトを回避するのに十分な短さです。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:661
msgid "Create the `src/main/resources/application.properties` file:"
msgstr "`src/main/resources/application.properties` ファイルを作成します。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:667
#, no-wrap
msgid ""
"# The solver runs only for 5 seconds to avoid a HTTP timeout in this simple implementation.\n"
"# It's recommended to run for at least 5 minutes (\"5m\") otherwise.\n"
"quarkus.optaplanner.solver.termination.spent-limit=5s\n"
msgstr ""
"# The solver runs only for 5 seconds to avoid a HTTP timeout in this simple implementation.\n"
"# It's recommended to run for at least 5 minutes (\"5m\") otherwise.\n"
"quarkus.optaplanner.solver.termination.spent-limit=5s\n"

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:670
#, no-wrap
msgid "Run the application"
msgstr "アプリケーションの実行"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:673
msgid "First start the application:"
msgstr "最初にアプリケーションを起動します。"

#. type: Title ===
#: upstream/_guides/optaplanner.adoc:676
#, no-wrap
msgid "Try the application"
msgstr "アプリケーションの試行"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:681
msgid "Now that the application is running, you can test the REST service.  You can use any REST client you wish.  The following example uses the Linux command `curl` to send a POST request:"
msgstr "これでアプリケーションが実行されたため、REST サービスをテストできます。任意の REST クライアントを使用できます。次の例では、Linux コマンド `curl` を使用して POST 要求を送信します。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:685
#, no-wrap
msgid "$ curl -i -X POST http://localhost:8080/timeTable/solve -H \"Content-Type:application/json\" -d '{\"timeslotList\":[{\"dayOfWeek\":\"MONDAY\",\"startTime\":\"08:30:00\",\"endTime\":\"09:30:00\"},{\"dayOfWeek\":\"MONDAY\",\"startTime\":\"09:30:00\",\"endTime\":\"10:30:00\"}],\"roomList\":[{\"name\":\"Room A\"},{\"name\":\"Room B\"}],\"lessonList\":[{\"id\":1,\"subject\":\"Math\",\"teacher\":\"A. Turing\",\"studentGroup\":\"9th grade\"},{\"id\":2,\"subject\":\"Chemistry\",\"teacher\":\"M. Curie\",\"studentGroup\":\"9th grade\"},{\"id\":3,\"subject\":\"French\",\"teacher\":\"M. Curie\",\"studentGroup\":\"10th grade\"},{\"id\":4,\"subject\":\"History\",\"teacher\":\"I. Jones\",\"studentGroup\":\"10th grade\"}]}'\n"
msgstr "$ curl -i -X POST http://localhost:8080/timeTable/solve -H \"Content-Type:application/json\" -d '{\"timeslotList\":[{\"dayOfWeek\":\"MONDAY\",\"startTime\":\"08:30:00\",\"endTime\":\"09:30:00\"},{\"dayOfWeek\":\"MONDAY\",\"startTime\":\"09:30:00\",\"endTime\":\"10:30:00\"}],\"roomList\":[{\"name\":\"Room A\"},{\"name\":\"Room B\"}],\"lessonList\":[{\"id\":1,\"subject\":\"Math\",\"teacher\":\"A. Turing\",\"studentGroup\":\"9th grade\"},{\"id\":2,\"subject\":\"Chemistry\",\"teacher\":\"M. Curie\",\"studentGroup\":\"9th grade\"},{\"id\":3,\"subject\":\"French\",\"teacher\":\"M. Curie\",\"studentGroup\":\"10th grade\"},{\"id\":4,\"subject\":\"History\",\"teacher\":\"I. Jones\",\"studentGroup\":\"10th grade\"}]}'\n"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:689
msgid "After about five seconds, according to the termination spent time defined in your `application.properties`, the service returns an output similar to the following example:"
msgstr "約 5 秒後に、`application.properties` で定義された終了時間に応じて、サービスは次の例のような出力を返します。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:695
#, no-wrap
msgid ""
"HTTP/1.1 200\n"
"Content-Type: application/json\n"
"...\n"
msgstr ""
"HTTP/1.1 200\n"
"Content-Type: application/json\n"
"...\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:697
#, no-wrap
msgid "{\"timeslotList\":...,\"roomList\":...,\"lessonList\":[{\"id\":1,\"subject\":\"Math\",\"teacher\":\"A. Turing\",\"studentGroup\":\"9th grade\",\"timeslot\":{\"dayOfWeek\":\"MONDAY\",\"startTime\":\"08:30:00\",\"endTime\":\"09:30:00\"},\"room\":{\"name\":\"Room A\"}},{\"id\":2,\"subject\":\"Chemistry\",\"teacher\":\"M. Curie\",\"studentGroup\":\"9th grade\",\"timeslot\":{\"dayOfWeek\":\"MONDAY\",\"startTime\":\"09:30:00\",\"endTime\":\"10:30:00\"},\"room\":{\"name\":\"Room A\"}},{\"id\":3,\"subject\":\"French\",\"teacher\":\"M. Curie\",\"studentGroup\":\"10th grade\",\"timeslot\":{\"dayOfWeek\":\"MONDAY\",\"startTime\":\"08:30:00\",\"endTime\":\"09:30:00\"},\"room\":{\"name\":\"Room B\"}},{\"id\":4,\"subject\":\"History\",\"teacher\":\"I. Jones\",\"studentGroup\":\"10th grade\",\"timeslot\":{\"dayOfWeek\":\"MONDAY\",\"startTime\":\"09:30:00\",\"endTime\":\"10:30:00\"},\"room\":{\"name\":\"Room B\"}}],\"score\":\"0hard/0soft\"}\n"
msgstr "{\"timeslotList\":...,\"roomList\":...,\"lessonList\":[{\"id\":1,\"subject\":\"Math\",\"teacher\":\"A. Turing\",\"studentGroup\":\"9th grade\",\"timeslot\":{\"dayOfWeek\":\"MONDAY\",\"startTime\":\"08:30:00\",\"endTime\":\"09:30:00\"},\"room\":{\"name\":\"Room A\"}},{\"id\":2,\"subject\":\"Chemistry\",\"teacher\":\"M. Curie\",\"studentGroup\":\"9th grade\",\"timeslot\":{\"dayOfWeek\":\"MONDAY\",\"startTime\":\"09:30:00\",\"endTime\":\"10:30:00\"},\"room\":{\"name\":\"Room A\"}},{\"id\":3,\"subject\":\"French\",\"teacher\":\"M. Curie\",\"studentGroup\":\"10th grade\",\"timeslot\":{\"dayOfWeek\":\"MONDAY\",\"startTime\":\"08:30:00\",\"endTime\":\"09:30:00\"},\"room\":{\"name\":\"Room B\"}},{\"id\":4,\"subject\":\"History\",\"teacher\":\"I. Jones\",\"studentGroup\":\"10th grade\",\"timeslot\":{\"dayOfWeek\":\"MONDAY\",\"startTime\":\"09:30:00\",\"endTime\":\"10:30:00\"},\"room\":{\"name\":\"Room B\"}}],\"score\":\"0hard/0soft\"}\n"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:702
msgid "Notice that your application assigned all four lessons to one of the two time slots and one of the two rooms.  Also notice that it conforms to all hard constraints.  For example, M. Curie's two lessons are in different time slots."
msgstr "アプリケーションが 4 つのレッスンすべてを 2 つのタイムスロットのいずれか 1 つと、2 つの教室のいずれか 1 つに割り当てていることに注意してください。また、すべてのハード制約に準拠していることにも注意してください。たとえば、M. Curie の 2 つのレッスンは異なるタイムスロットにあります。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:704
msgid "On the server side, the `info` log show what OptaPlanner did in those five seconds:"
msgstr "サーバー側では、`info` ログに OptaPlanner が 5 秒間で何をしたかが示されます。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:711
#, no-wrap
msgid ""
"... Solving started: time spent (33), best score (-8init/0hard/0soft), environment mode (REPRODUCIBLE), random (JDK with seed 0).\n"
"... Construction Heuristic phase (0) ended: time spent (73), best score (0hard/0soft), score calculation speed (459/sec), step total (4).\n"
"... Local Search phase (1) ended: time spent (5000), best score (0hard/0soft), score calculation speed (28949/sec), step total (28398).\n"
"... Solving ended: time spent (5000), best score (0hard/0soft), score calculation speed (28524/sec), phase total (2), environment mode (REPRODUCIBLE).\n"
msgstr ""
"... Solving started: time spent (33), best score (-8init/0hard/0soft), environment mode (REPRODUCIBLE), random (JDK with seed 0).\n"
"... Construction Heuristic phase (0) ended: time spent (73), best score (0hard/0soft), score calculation speed (459/sec), step total (4).\n"
"... Local Search phase (1) ended: time spent (5000), best score (0hard/0soft), score calculation speed (28949/sec), step total (28398).\n"
"... Solving ended: time spent (5000), best score (0hard/0soft), score calculation speed (28524/sec), phase total (2), environment mode (REPRODUCIBLE).\n"

#. type: Title ===
#: upstream/_guides/optaplanner.adoc:713
#, no-wrap
msgid "Test the application"
msgstr "アプリケーションのテスト"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:716
msgid "A good application includes test coverage."
msgstr "優れたアプリケーションには、テストカバレッジが含まれます。"

#. type: Title ====
#: upstream/_guides/optaplanner.adoc:717
#, no-wrap
msgid "Test the constraints"
msgstr "制約のテスト"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:722
msgid "To test each constraint in isolation, use a `ConstraintVerifier` in unit tests.  It tests each constraint's corner cases in isolation from the other tests, which lowers maintenance when adding a new constraint with proper test coverage."
msgstr "各制約を個別にテストするには、単体テストで `ConstraintVerifier` を使用します。各制約のコーナーケースを他のテストとは別にテストします。これにより、適切なテストカバレッジで新しい制約を追加する際のメンテナーンスが軽減されます。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:724
msgid "Add a `optaplanner-test` dependency in your build file:"
msgstr "ビルドファイルに `optaplanner-test` 依存関係を追加します。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:733
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>org.optaplanner</groupId>\n"
"    <artifactId>optaplanner-test</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""
"<dependency>\n"
"    <groupId>org.optaplanner</groupId>\n"
"    <artifactId>optaplanner-test</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:739
#, no-wrap
msgid "testImplementation(\"org.optaplanner:optaplanner-test\")\n"
msgstr "testImplementation(\"org.optaplanner:optaplanner-test\")\n"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:742
msgid "Create the `src/test/java/org/acme/optaplanner/solver/TimeTableConstraintProviderTest.java` class:"
msgstr "`src/test/java/org/acme/optaplanner/solutioner/TimeTableConstraintProviderTest.java` クラスを作成します。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:751 upstream/_guides/optaplanner.adoc:819
#: upstream/_guides/optaplanner.adoc:1057
#, no-wrap
msgid "import javax.inject.Inject;\n"
msgstr "import javax.inject.Inject;\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:759
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.acme.optaplanner.domain.Lesson;\n"
"import org.acme.optaplanner.domain.Room;\n"
"import org.acme.optaplanner.domain.TimeTable;\n"
"import org.acme.optaplanner.domain.Timeslot;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.optaplanner.test.api.score.stream.ConstraintVerifier;\n"
msgstr ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.acme.optaplanner.domain.Lesson;\n"
"import org.acme.optaplanner.domain.Room;\n"
"import org.acme.optaplanner.domain.TimeTable;\n"
"import org.acme.optaplanner.domain.Timeslot;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.optaplanner.test.api.score.stream.ConstraintVerifier;\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:762
#, no-wrap
msgid ""
"@QuarkusTest\n"
"class TimeTableConstraintProviderTest {\n"
msgstr ""
"@QuarkusTest\n"
"class TimeTableConstraintProviderTest {\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:766
#, no-wrap
msgid ""
"    private static final Room ROOM = new Room(\"Room1\");\n"
"    private static final Timeslot TIMESLOT1 = new Timeslot(DayOfWeek.MONDAY, LocalTime.of(9,0), LocalTime.NOON);\n"
"    private static final Timeslot TIMESLOT2 = new Timeslot(DayOfWeek.TUESDAY, LocalTime.of(9,0), LocalTime.NOON);\n"
msgstr ""
"    private static final Room ROOM = new Room(\"Room1\");\n"
"    private static final Timeslot TIMESLOT1 = new Timeslot(DayOfWeek.MONDAY, LocalTime.of(9,0), LocalTime.NOON);\n"
"    private static final Timeslot TIMESLOT2 = new Timeslot(DayOfWeek.TUESDAY, LocalTime.of(9,0), LocalTime.NOON);\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:769
#, no-wrap
msgid ""
"    @Inject\n"
"    ConstraintVerifier<TimeTableConstraintProvider, TimeTable> constraintVerifier;\n"
msgstr ""
"    @Inject\n"
"    ConstraintVerifier<TimeTableConstraintProvider, TimeTable> constraintVerifier;\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:775
#, no-wrap
msgid ""
"    @Test\n"
"    void roomConflict() {\n"
"        Lesson firstLesson = new Lesson(1, \"Subject1\", \"Teacher1\", \"Group1\");\n"
"        Lesson conflictingLesson = new Lesson(2, \"Subject2\", \"Teacher2\", \"Group2\");\n"
"        Lesson nonConflictingLesson = new Lesson(3, \"Subject3\", \"Teacher3\", \"Group3\");\n"
msgstr ""
"    @Test\n"
"    void roomConflict() {\n"
"        Lesson firstLesson = new Lesson(1, \"Subject1\", \"Teacher1\", \"Group1\");\n"
"        Lesson conflictingLesson = new Lesson(2, \"Subject2\", \"Teacher2\", \"Group2\");\n"
"        Lesson nonConflictingLesson = new Lesson(3, \"Subject3\", \"Teacher3\", \"Group3\");\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:778
#, no-wrap
msgid ""
"        firstLesson.setRoom(ROOM);\n"
"        firstLesson.setTimeslot(TIMESLOT1);\n"
msgstr ""
"        firstLesson.setRoom(ROOM);\n"
"        firstLesson.setTimeslot(TIMESLOT1);\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:781
#, no-wrap
msgid ""
"        conflictingLesson.setRoom(ROOM);\n"
"        conflictingLesson.setTimeslot(TIMESLOT1);\n"
msgstr ""
"        conflictingLesson.setRoom(ROOM);\n"
"        conflictingLesson.setTimeslot(TIMESLOT1);\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:784
#, no-wrap
msgid ""
"        nonConflictingLesson.setRoom(ROOM);\n"
"        nonConflictingLesson.setTimeslot(TIMESLOT2);\n"
msgstr ""
"        nonConflictingLesson.setRoom(ROOM);\n"
"        nonConflictingLesson.setTimeslot(TIMESLOT2);\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:789
#, no-wrap
msgid ""
"        constraintVerifier.verifyThat(TimeTableConstraintProvider::roomConflict)\n"
"                .given(firstLesson, conflictingLesson, nonConflictingLesson)\n"
"                .penalizesBy(1);\n"
"    }\n"
msgstr ""
"        constraintVerifier.verifyThat(TimeTableConstraintProvider::roomConflict)\n"
"                .given(firstLesson, conflictingLesson, nonConflictingLesson)\n"
"                .penalizesBy(1);\n"
"    }\n"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:797
msgid "This test verifies that the constraint `TimeTableConstraintProvider::roomConflict`, when given three lessons in the same room, where two lessons have the same timeslot, it penalizes with a match weight of `1`.  So with a constraint weight of `10hard` it would reduce the score by `-10hard`."
msgstr "このテストは、制約 `TimeTableConstraintProvider::roomConflict `が、同じ教室に 3 つのレッスンが指定され、2 つのレッスンのタイムスロットが同じ場合に、一致の重み `1` でペナルティを課すことを確認します。したがって、制約の重みが `10hard` の場合、スコアは `-10hard` 減少します。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:802
msgid "Notice how `ConstraintVerifier` ignores the constraint weight during testing - even if those constraint weights are hard coded in the `ConstraintProvider` - because constraints weights change regularly before going into production.  This way, constraint weight tweaking does not break the unit tests."
msgstr "制約の重みは本番環境に入る前に定期的に変更されるため、`ConstraintVerifier` は (その制約の重みが `ConstraintProvider` にハードコーディングされている場合でも) テスト中は制約の重みを無視することに注意してください。このように、制約の重みを微調整してもユニットテストが中断されることはありません。"

#. type: Title ====
#: upstream/_guides/optaplanner.adoc:803
#, no-wrap
msgid "Test the solver"
msgstr "ソルバーのテスト"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:806
msgid "In a JUnit test, generate a test dataset and send it to the `TimeTableResource` to solve."
msgstr "JUnit テストでは、テストデータセットを生成し、それを `TimeTableResource` に送信して解決します。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:808
msgid "Create the `src/test/java/org/acme/optaplanner/rest/TimeTableResourceTest.java` class:"
msgstr "`src/test/java/org/acme/optaplanner/rest/TimeTableResourceTest.java` クラスを作成します。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:817
#, no-wrap
msgid ""
"import java.time.DayOfWeek;\n"
"import java.time.LocalTime;\n"
"import java.util.ArrayList;\n"
"import java.util.List;\n"
msgstr ""
"import java.time.DayOfWeek;\n"
"import java.time.LocalTime;\n"
"import java.util.ArrayList;\n"
"import java.util.List;\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:828
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.acme.optaplanner.domain.Room;\n"
"import org.acme.optaplanner.domain.Timeslot;\n"
"import org.acme.optaplanner.domain.Lesson;\n"
"import org.acme.optaplanner.domain.TimeTable;\n"
"import org.acme.optaplanner.rest.TimeTableResource;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.junit.jupiter.api.Timeout;\n"
msgstr ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.acme.optaplanner.domain.Room;\n"
"import org.acme.optaplanner.domain.Timeslot;\n"
"import org.acme.optaplanner.domain.Lesson;\n"
"import org.acme.optaplanner.domain.TimeTable;\n"
"import org.acme.optaplanner.rest.TimeTableResource;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.junit.jupiter.api.Timeout;\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:832 upstream/_guides/optaplanner.adoc:1068
#, no-wrap
msgid ""
"import static org.junit.jupiter.api.Assertions.assertFalse;\n"
"import static org.junit.jupiter.api.Assertions.assertNotNull;\n"
"import static org.junit.jupiter.api.Assertions.assertTrue;\n"
msgstr ""
"import static org.junit.jupiter.api.Assertions.assertFalse;\n"
"import static org.junit.jupiter.api.Assertions.assertNotNull;\n"
"import static org.junit.jupiter.api.Assertions.assertTrue;\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:835 upstream/_guides/optaplanner.adoc:1071
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class TimeTableResourceTest {\n"
msgstr ""
"@QuarkusTest\n"
"public class TimeTableResourceTest {\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:838 upstream/_guides/optaplanner.adoc:1074
#, no-wrap
msgid ""
"    @Inject\n"
"    TimeTableResource timeTableResource;\n"
msgstr ""
"    @Inject\n"
"    TimeTableResource timeTableResource;\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:851
#, no-wrap
msgid ""
"    @Test\n"
"    @Timeout(600_000)\n"
"    public void solve() {\n"
"        TimeTable problem = generateProblem();\n"
"        TimeTable solution = timeTableResource.solve(problem);\n"
"        assertFalse(solution.getLessonList().isEmpty());\n"
"        for (Lesson lesson : solution.getLessonList()) {\n"
"            assertNotNull(lesson.getTimeslot());\n"
"            assertNotNull(lesson.getRoom());\n"
"        }\n"
"        assertTrue(solution.getScore().isFeasible());\n"
"    }\n"
msgstr ""
"    @Test\n"
"    @Timeout(600_000)\n"
"    public void solve() {\n"
"        TimeTable problem = generateProblem();\n"
"        TimeTable solution = timeTableResource.solve(problem);\n"
"        assertFalse(solution.getLessonList().isEmpty());\n"
"        for (Lesson lesson : solution.getLessonList()) {\n"
"            assertNotNull(lesson.getTimeslot());\n"
"            assertNotNull(lesson.getRoom());\n"
"        }\n"
"        assertTrue(solution.getScore().isFeasible());\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:859
#, no-wrap
msgid ""
"    private TimeTable generateProblem() {\n"
"        List<Timeslot> timeslotList = new ArrayList<>();\n"
"        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(8, 30), LocalTime.of(9, 30)));\n"
"        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(9, 30), LocalTime.of(10, 30)));\n"
"        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(10, 30), LocalTime.of(11, 30)));\n"
"        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(13, 30), LocalTime.of(14, 30)));\n"
"        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(14, 30), LocalTime.of(15, 30)));\n"
msgstr ""
"    private TimeTable generateProblem() {\n"
"        List<Timeslot> timeslotList = new ArrayList<>();\n"
"        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(8, 30), LocalTime.of(9, 30)));\n"
"        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(9, 30), LocalTime.of(10, 30)));\n"
"        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(10, 30), LocalTime.of(11, 30)));\n"
"        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(13, 30), LocalTime.of(14, 30)));\n"
"        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(14, 30), LocalTime.of(15, 30)));\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:864
#, no-wrap
msgid ""
"        List<Room> roomList = new ArrayList<>();\n"
"        roomList.add(new Room(\"Room A\"));\n"
"        roomList.add(new Room(\"Room B\"));\n"
"        roomList.add(new Room(\"Room C\"));\n"
msgstr ""
"        List<Room> roomList = new ArrayList<>();\n"
"        roomList.add(new Room(\"Room A\"));\n"
"        roomList.add(new Room(\"Room B\"));\n"
"        roomList.add(new Room(\"Room C\"));\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:871
#, no-wrap
msgid ""
"        List<Lesson> lessonList = new ArrayList<>();\n"
"        lessonList.add(new Lesson(101L, \"Math\", \"B. May\", \"9th grade\"));\n"
"        lessonList.add(new Lesson(102L, \"Physics\", \"M. Curie\", \"9th grade\"));\n"
"        lessonList.add(new Lesson(103L, \"Geography\", \"M. Polo\", \"9th grade\"));\n"
"        lessonList.add(new Lesson(104L, \"English\", \"I. Jones\", \"9th grade\"));\n"
"        lessonList.add(new Lesson(105L, \"Spanish\", \"P. Cruz\", \"9th grade\"));\n"
msgstr ""
"        List<Lesson> lessonList = new ArrayList<>();\n"
"        lessonList.add(new Lesson(101L, \"Math\", \"B. May\", \"9th grade\"));\n"
"        lessonList.add(new Lesson(102L, \"Physics\", \"M. Curie\", \"9th grade\"));\n"
"        lessonList.add(new Lesson(103L, \"Geography\", \"M. Polo\", \"9th grade\"));\n"
"        lessonList.add(new Lesson(104L, \"English\", \"I. Jones\", \"9th grade\"));\n"
"        lessonList.add(new Lesson(105L, \"Spanish\", \"P. Cruz\", \"9th grade\"));\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:879
#, no-wrap
msgid ""
"        lessonList.add(new Lesson(201L, \"Math\", \"B. May\", \"10th grade\"));\n"
"        lessonList.add(new Lesson(202L, \"Chemistry\", \"M. Curie\", \"10th grade\"));\n"
"        lessonList.add(new Lesson(203L, \"History\", \"I. Jones\", \"10th grade\"));\n"
"        lessonList.add(new Lesson(204L, \"English\", \"P. Cruz\", \"10th grade\"));\n"
"        lessonList.add(new Lesson(205L, \"French\", \"M. Curie\", \"10th grade\"));\n"
"        return new TimeTable(timeslotList, roomList, lessonList);\n"
"    }\n"
msgstr ""
"        lessonList.add(new Lesson(201L, \"Math\", \"B. May\", \"10th grade\"));\n"
"        lessonList.add(new Lesson(202L, \"Chemistry\", \"M. Curie\", \"10th grade\"));\n"
"        lessonList.add(new Lesson(203L, \"History\", \"I. Jones\", \"10th grade\"));\n"
"        lessonList.add(new Lesson(204L, \"English\", \"P. Cruz\", \"10th grade\"));\n"
"        lessonList.add(new Lesson(205L, \"French\", \"M. Curie\", \"10th grade\"));\n"
"        return new TimeTable(timeslotList, roomList, lessonList);\n"
"    }\n"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:885
msgid "This test verifies that after solving, all lessons are assigned to a time slot and a room.  It also verifies that it found a feasible solution (no hard constraints broken)."
msgstr "このテストは、解決した後、すべてのレッスンがタイムスロットと教室に割り当てられていることを確認します。また、実行可能なソリューション (厳しい制約が破られていない) が見つかったことを確認します。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:887
msgid "Add test properties to the `src/main/resources/application.properties` file:"
msgstr "テストプロパティーを `src/main/resources/application.properties` ファイルに追加します。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:891
#, no-wrap
msgid "quarkus.optaplanner.solver.termination.spent-limit=5s\n"
msgstr "quarkus.optaplanner.solver.termination.spent-limit=5s\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:895
#, no-wrap
msgid ""
"# Effectively disable spent-time termination in favor of the best-score-limit\n"
"%test.quarkus.optaplanner.solver.termination.spent-limit=1h\n"
"%test.quarkus.optaplanner.solver.termination.best-score-limit=0hard/*soft\n"
msgstr ""
"# Effectively disable spent-time termination in favor of the best-score-limit\n"
"%test.quarkus.optaplanner.solver.termination.spent-limit=1h\n"
"%test.quarkus.optaplanner.solver.termination.best-score-limit=0hard/*soft\n"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:903
msgid "Normally, the solver finds a feasible solution in less than 200 milliseconds.  Notice how the `application.properties` overwrites the solver termination during tests to terminate as soon as a feasible solution (`0hard/*soft`) is found.  This avoids hard coding a solver time, because the unit test might run on arbitrary hardware.  This approach ensures that the test runs long enough to find a feasible solution, even on slow machines.  But it does not run a millisecond longer than it strictly must, even on fast machines."
msgstr "通常、ソルバーは 200 ミリ秒未満で実行可能なソリューションを見つけます。`application.properties`は、実行可能なソリューション (`0hard/* soft`) が見つかり次第すぐに終了するように、テスト中にソルバーの終了を上書きすることに注意してください。これにより、ユニットテストが任意のハードウェアで実行される可能性があるため、ソルバー時間をハードコーディングする必要がなくなります。このアプローチにより、低速マシンでも実行可能なソリューションを見つけるのに十分な時間、テストが実行されます。ただし、高速マシンであっても、厳密に必要な時間より 1 ミリ秒も長く実行されることはありません。"

#. type: Title ===
#: upstream/_guides/optaplanner.adoc:904
#, no-wrap
msgid "Logging"
msgstr "ロギング"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:909
msgid "When adding constraints in your `ConstraintProvider`, keep an eye on the _score calculation speed_ in the `info` log, after solving for the same amount of time, to assess the performance impact:"
msgstr "`ConstraintProvider` に制約を追加するときは、同じ時間で解決した後、`info` ログでの_スコア計算速度_に注意してパフォーマンスへの影響を評価してください。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:913
#, no-wrap
msgid "... Solving ended: ..., score calculation speed (29455/sec), ...\n"
msgstr "... Solving ended: ..., score calculation speed (29455/sec), ...\n"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:917
msgid "To understand how OptaPlanner is solving your problem internally, change the logging in the `application.properties` file or with a `-D` system property:"
msgstr "OptaPlanner が内部で問題をどのように解決しているかを理解するには、`application.properties` ファイルまたは `-D` システムプロパティーのロギングを変更します。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:921
#, no-wrap
msgid "quarkus.log.category.\"org.optaplanner\".level=debug\n"
msgstr "quarkus.log.category.\"org.optaplanner\".level=debug\n"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:924
msgid "Use `debug` logging to show every _step_:"
msgstr "`debug` ロギングを使用して、すべての_ステップ_を表示します。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:931
#, no-wrap
msgid ""
"... Solving started: time spent (67), best score (-20init/0hard/0soft), environment mode (REPRODUCIBLE), random (JDK with seed 0).\n"
"...     CH step (0), time spent (128), score (-18init/0hard/0soft), selected move count (15), picked move ([Math(101) {null -> Room A}, Math(101) {null -> MONDAY 08:30}]).\n"
"...     CH step (1), time spent (145), score (-16init/0hard/0soft), selected move count (15), picked move ([Physics(102) {null -> Room A}, Physics(102) {null -> MONDAY 09:30}]).\n"
"...\n"
msgstr ""
"... Solving started: time spent (67), best score (-20init/0hard/0soft), environment mode (REPRODUCIBLE), random (JDK with seed 0).\n"
"...     CH step (0), time spent (128), score (-18init/0hard/0soft), selected move count (15), picked move ([Math(101) {null -> Room A}, Math(101) {null -> MONDAY 08:30}]).\n"
"...     CH step (1), time spent (145), score (-16init/0hard/0soft), selected move count (15), picked move ([Physics(102) {null -> Room A}, Physics(102) {null -> MONDAY 09:30}]).\n"
"...\n"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:934
msgid "Use `trace` logging to show every _step_ and every _move_ per step."
msgstr "`trace` ロギングを使用して、すべての_ステップ_と、ステップごとのすべての_動き_を表示します。"

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:935
#, no-wrap
msgid "Summary"
msgstr "まとめ"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:939
msgid "Congratulations! You have just developed a Quarkus application with https://www.optaplanner.org/[OptaPlanner]!"
msgstr "これで、https://www.optaplanner.org/[OptaPlanner] を使用して Quarkus アプリケーションを開発しました。"

#. type: Title ==
#: upstream/_guides/optaplanner.adoc:940
#, no-wrap
msgid "Further improvements: Database and UI integration"
msgstr "さらなる改善: データベースと UI の統合"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:943
msgid "Now try adding database and UI integration:"
msgstr "次に、データベースと UI の統合を追加しましょう。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:945
msgid "Store `Timeslot`, `Room`, and `Lesson` in the database with xref:hibernate-orm-panache.adoc[Hibernate and Panache]."
msgstr "`Timeslot`、`Room`、`Lesson` を xref:hibernate-orm-panache.adoc[Hibernate および Panache] を使用してデータベースに保存します。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:947
msgid "xref:rest-json.adoc[Expose them through REST]."
msgstr "xref:rest-json.adoc[Expose them through REST]."

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:950
msgid "Adjust the `TimeTableResource` to read and write a `TimeTable` instance in a single transaction and use those accordingly:"
msgstr "`TimeTableResource` を調整して、単一のトランザクションで ` TimeTable` インスタンスを読み書きし、適切にそれらを使用します。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:960
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.transaction.Transactional;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
msgstr ""
"import javax.inject.Inject;\n"
"import javax.transaction.Transactional;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:970
#, no-wrap
msgid ""
"import io.quarkus.panache.common.Sort;\n"
"import org.acme.optaplanner.domain.Lesson;\n"
"import org.acme.optaplanner.domain.Room;\n"
"import org.acme.optaplanner.domain.TimeTable;\n"
"import org.acme.optaplanner.domain.Timeslot;\n"
"import org.optaplanner.core.api.score.ScoreManager;\n"
"import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;\n"
"import org.optaplanner.core.api.solver.SolverManager;\n"
"import org.optaplanner.core.api.solver.SolverStatus;\n"
msgstr ""
"import io.quarkus.panache.common.Sort;\n"
"import org.acme.optaplanner.domain.Lesson;\n"
"import org.acme.optaplanner.domain.Room;\n"
"import org.acme.optaplanner.domain.TimeTable;\n"
"import org.acme.optaplanner.domain.Timeslot;\n"
"import org.optaplanner.core.api.score.ScoreManager;\n"
"import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;\n"
"import org.optaplanner.core.api.solver.SolverManager;\n"
"import org.optaplanner.core.api.solver.SolverStatus;\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:975
#, no-wrap
msgid "    public static final Long SINGLETON_TIME_TABLE_ID = 1L;\n"
msgstr "    public static final Long SINGLETON_TIME_TABLE_ID = 1L;\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:980
#, no-wrap
msgid ""
"    @Inject\n"
"    SolverManager<TimeTable, Long> solverManager;\n"
"    @Inject\n"
"    ScoreManager<TimeTable, HardSoftScore> scoreManager;\n"
msgstr ""
"    @Inject\n"
"    SolverManager<TimeTable, Long> solverManager;\n"
"    @Inject\n"
"    ScoreManager<TimeTable, HardSoftScore> scoreManager;\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:992
#, no-wrap
msgid ""
"    // To try, open http://localhost:8080/timeTable\n"
"    @GET\n"
"    public TimeTable getTimeTable() {\n"
"        // Get the solver status before loading the solution\n"
"        // to avoid the race condition that the solver terminates between them\n"
"        SolverStatus solverStatus = getSolverStatus();\n"
"        TimeTable solution = findById(SINGLETON_TIME_TABLE_ID);\n"
"        scoreManager.updateScore(solution); // Sets the score\n"
"        solution.setSolverStatus(solverStatus);\n"
"        return solution;\n"
"    }\n"
msgstr ""
"    // To try, open http://localhost:8080/timeTable\n"
"    @GET\n"
"    public TimeTable getTimeTable() {\n"
"        // Get the solver status before loading the solution\n"
"        // to avoid the race condition that the solver terminates between them\n"
"        SolverStatus solverStatus = getSolverStatus();\n"
"        TimeTable solution = findById(SINGLETON_TIME_TABLE_ID);\n"
"        scoreManager.updateScore(solution); // Sets the score\n"
"        solution.setSolverStatus(solverStatus);\n"
"        return solution;\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:1000
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/solve\")\n"
"    public void solve() {\n"
"        solverManager.solveAndListen(SINGLETON_TIME_TABLE_ID,\n"
"                this::findById,\n"
"                this::save);\n"
"    }\n"
msgstr ""
"    @POST\n"
"    @Path(\"/solve\")\n"
"    public void solve() {\n"
"        solverManager.solveAndListen(SINGLETON_TIME_TABLE_ID,\n"
"                this::findById,\n"
"                this::save);\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:1004
#, no-wrap
msgid ""
"    public SolverStatus getSolverStatus() {\n"
"        return solverManager.getSolverStatus(SINGLETON_TIME_TABLE_ID);\n"
"    }\n"
msgstr ""
"    public SolverStatus getSolverStatus() {\n"
"        return solverManager.getSolverStatus(SINGLETON_TIME_TABLE_ID);\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:1010
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/stopSolving\")\n"
"    public void stopSolving() {\n"
"        solverManager.terminateEarly(SINGLETON_TIME_TABLE_ID);\n"
"    }\n"
msgstr ""
"    @POST\n"
"    @Path(\"/stopSolving\")\n"
"    public void stopSolving() {\n"
"        solverManager.terminateEarly(SINGLETON_TIME_TABLE_ID);\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:1023
#, no-wrap
msgid ""
"    @Transactional\n"
"    protected TimeTable findById(Long id) {\n"
"        if (!SINGLETON_TIME_TABLE_ID.equals(id)) {\n"
"            throw new IllegalStateException(\"There is no timeTable with id (\" + id + \").\");\n"
"        }\n"
"        // Occurs in a single transaction, so each initialized lesson references the same timeslot/room instance\n"
"        // that is contained by the timeTable's timeslotList/roomList.\n"
"        return new TimeTable(\n"
"                Timeslot.listAll(Sort.by(\"dayOfWeek\").and(\"startTime\").and(\"endTime\").and(\"id\")),\n"
"                Room.listAll(Sort.by(\"name\").and(\"id\")),\n"
"                Lesson.listAll(Sort.by(\"subject\").and(\"teacher\").and(\"studentGroup\").and(\"id\")));\n"
"    }\n"
msgstr ""
"    @Transactional\n"
"    protected TimeTable findById(Long id) {\n"
"        if (!SINGLETON_TIME_TABLE_ID.equals(id)) {\n"
"            throw new IllegalStateException(\"There is no timeTable with id (\" + id + \").\");\n"
"        }\n"
"        // Occurs in a single transaction, so each initialized lesson references the same timeslot/room instance\n"
"        // that is contained by the timeTable's timeslotList/roomList.\n"
"        return new TimeTable(\n"
"                Timeslot.listAll(Sort.by(\"dayOfWeek\").and(\"startTime\").and(\"endTime\").and(\"id\")),\n"
"                Room.listAll(Sort.by(\"name\").and(\"id\")),\n"
"                Lesson.listAll(Sort.by(\"subject\").and(\"teacher\").and(\"studentGroup\").and(\"id\")));\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:1033
#, no-wrap
msgid ""
"    @Transactional\n"
"    protected void save(TimeTable timeTable) {\n"
"        for (Lesson lesson : timeTable.getLessonList()) {\n"
"            // TODO this is awfully naive: optimistic locking causes issues if called by the SolverManager\n"
"            Lesson attachedLesson = Lesson.findById(lesson.getId());\n"
"            attachedLesson.setTimeslot(lesson.getTimeslot());\n"
"            attachedLesson.setRoom(lesson.getRoom());\n"
"        }\n"
"    }\n"
msgstr ""
"    @Transactional\n"
"    protected void save(TimeTable timeTable) {\n"
"        for (Lesson lesson : timeTable.getLessonList()) {\n"
"            // TODO this is awfully naive: optimistic locking causes issues if called by the SolverManager\n"
"            Lesson attachedLesson = Lesson.findById(lesson.getId());\n"
"            attachedLesson.setTimeslot(lesson.getTimeslot());\n"
"            attachedLesson.setRoom(lesson.getRoom());\n"
"        }\n"
"    }\n"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:1039
msgid "For simplicity's sake, this code handles only one `TimeTable` instance, but it is straightforward to enable multi-tenancy and handle multiple `TimeTable` instances of different high schools in parallel."
msgstr "わかりやすくするために、このコードは 1 つの `TimeTable` インスタンスのみを処理しますが、簡単にマルチテナンシーを有効にして、異なる高校の複数の `TimeTable` インスタンスを並行処理できます。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:1043
msgid "The `getTimeTable()` method returns the latest timetable from the database.  It uses the `ScoreManager` (which is automatically injected)  to calculate the score of that timetable, so the UI can show the score."
msgstr "`getTimeTable()` メソッドは、データベースから最新のタイムテーブルを返します。`ScoreManager` (自動的に挿入されます) を使用してそのタイムテーブルのスコアを計算するため、UI でスコアを表示できます。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:1048
msgid "The `solve()` method starts a job to solve the current timetable and store the time slot and room assignments in the database.  It uses the `SolverManager.solveAndListen()` method to listen to intermediate best solutions and update the database accordingly.  This enables the UI to show progress while the backend is still solving."
msgstr "`solve()` メソッドは、現在のタイムテーブルを解決し、タイムスロットと教室の割り当てをデータベースに保存するジョブを開始します。`SolverManager.solveAndListen()` メソッドを使用して、中間の最適ソリューションをリッスンし、それに応じてデータベースを更新します。これにより、バックエンドが解決している間も、UI に進行状況を表示できます。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:1051
msgid "Adjust the `TimeTableResourceTest` instance accordingly, now that the `solve()` method returns immediately.  Poll for the latest solution until the solver finishes solving:"
msgstr "`TimeTableResourceTest` インスタンスを適切に調整します。これで、`solve()` メソッドがすぐに返されます。ソルバーが解決を完了するまで、最新のソリューションをポーリングします。"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:1064
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.acme.optaplanner.domain.Lesson;\n"
"import org.acme.optaplanner.domain.TimeTable;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.junit.jupiter.api.Timeout;\n"
"import org.optaplanner.core.api.solver.SolverStatus;\n"
msgstr ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.acme.optaplanner.domain.Lesson;\n"
"import org.acme.optaplanner.domain.TimeTable;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.junit.jupiter.api.Timeout;\n"
"import org.optaplanner.core.api.solver.SolverStatus;\n"

#. type: delimited block -
#: upstream/_guides/optaplanner.adoc:1093
#, no-wrap
msgid ""
"    @Test\n"
"    @Timeout(600_000)\n"
"    public void solveDemoDataUntilFeasible() throws InterruptedException {\n"
"        timeTableResource.solve();\n"
"        TimeTable timeTable = timeTableResource.getTimeTable();\n"
"        while (timeTable.getSolverStatus() != SolverStatus.NOT_SOLVING) {\n"
"            // Quick polling (not a Test Thread Sleep anti-pattern)\n"
"            // Test is still fast on fast machines and doesn't randomly fail on slow machines.\n"
"            Thread.sleep(20L);\n"
"            timeTable = timeTableResource.getTimeTable();\n"
"        }\n"
"        assertFalse(timeTable.getLessonList().isEmpty());\n"
"        for (Lesson lesson : timeTable.getLessonList()) {\n"
"            assertNotNull(lesson.getTimeslot());\n"
"            assertNotNull(lesson.getRoom());\n"
"        }\n"
"        assertTrue(timeTable.getScore().isFeasible());\n"
"    }\n"
msgstr ""
"    @Test\n"
"    @Timeout(600_000)\n"
"    public void solveDemoDataUntilFeasible() throws InterruptedException {\n"
"        timeTableResource.solve();\n"
"        TimeTable timeTable = timeTableResource.getTimeTable();\n"
"        while (timeTable.getSolverStatus() != SolverStatus.NOT_SOLVING) {\n"
"            // Quick polling (not a Test Thread Sleep anti-pattern)\n"
"            // Test is still fast on fast machines and doesn't randomly fail on slow machines.\n"
"            Thread.sleep(20L);\n"
"            timeTable = timeTableResource.getTimeTable();\n"
"        }\n"
"        assertFalse(timeTable.getLessonList().isEmpty());\n"
"        for (Lesson lesson : timeTable.getLessonList()) {\n"
"            assertNotNull(lesson.getTimeslot());\n"
"            assertNotNull(lesson.getRoom());\n"
"        }\n"
"        assertTrue(timeTable.getScore().isFeasible());\n"
"    }\n"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:1098
msgid "Build an attractive web UI on top of these REST methods to visualize the timetable."
msgstr "これらの REST メソッドに魅力的な Web UI を構築して、タイムテーブルを視覚化します。"

#. type: Plain text
#: upstream/_guides/optaplanner.adoc:1099
msgid "Take a look at {quickstarts-tree-url}/optaplanner-quickstart[the quickstart source code] to see how this all turns out."
msgstr "{quickstarts-tree-url}/optaplanner-quickstart[クイックスタートソースコード] で、どのように表示されるか確認します。"

#~ msgid "RESTEasy JAX-RS (`quarkus-resteasy`)"
#~ msgstr "RESTEasy JAX-RS ( `quarkus-resteasy`)"

#~ msgid "To complete this guide, you need:"
#~ msgstr "このガイドを完成させるには、以下が必要です:"

#~ msgid "about 30 minutes"
#~ msgstr "約30分"

#~ msgid "an IDE"
#~ msgstr "IDE"

#~ msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
#~ msgstr "JDK 11+ がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#~ msgid "Apache Maven {maven-version} or Gradle 4+"
#~ msgstr "Apache Maven {maven-version} または Gradle 4+。"

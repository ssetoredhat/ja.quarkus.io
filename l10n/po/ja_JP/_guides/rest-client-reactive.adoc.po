# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2022-05-25 16:13+0000\n"
"PO-Revision-Date: 2022-06-20 17:42+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.1\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/rest-client-reactive.adoc:6
#, no-wrap
msgid "Using the REST Client Reactive"
msgstr "REST クライアントリアクティブの使用"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:12
msgid "This guide explains how to use the REST Client Reactive in order to interact with REST APIs.  REST Client Reactive is the REST Client implementation compatible with RESTEasy Reactive."
msgstr "このガイドでは、REST クライアントリアクティブを使用して REST API と対話する方法について説明します。REST クライアントリアクティブは、RESTEasy Reactive と互換性のある REST クライアント実装です。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:15
msgid "If your application uses a client and exposes REST endpoints, please use xref:resteasy-reactive.adoc[RESTEasy Reactive] for the server part."
msgstr "アプリケーションがクライアントを使用し、REST エンドポイントを公開する場合は、サーバー部分に xref:resteasy-reactive.adoc[RESTEasy Reactive] を使用してください。"

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:16
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:20
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:24
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:26
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Git リポジトリーのクローンを作成: `git clone{quickstarts-clone-url}`、または {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:28
msgid "The solution is located in the `rest-client-reactive-quickstart` {quickstarts-tree-url}/rest-client-reactive-quickstart[directory]."
msgstr "ソリューションは `rest-client-reactive-quickstart` にあります {quickstarts-tree-url}/rest-client-reactive-quickstart[directory]。"

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:29
#, no-wrap
msgid "Creating the Maven project"
msgstr "Maven プロジェクトの作成"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:32
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:38
msgid "This command generates the Maven project with a REST endpoint and imports:"
msgstr "このコマンドは、REST エンドポイントを持つ Maven プロジェクトを生成し、 `rest-client` と `resteasy-jackson` のエクステンションをインポートします。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:40
msgid "the `resteasy-reactive-jackson` extension for the REST server support. Use `resteasy-reactive` instead if you do not wish to use Jackson;"
msgstr "REST サーバーサポート用の `resteasy-reactive-jackson` エクステンション。ジャクソンを使用したくない場合は、代わりに `resteasy-reactive` を使用してください。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:41
msgid "the `rest-client-reactive-jackson` extension for the REST client support. Use `rest-client-reactive` instead if you do not wish to use Jackson"
msgstr "REST クライアントサポート用の `rest-client-reactive-jackson` エクステンション。Jackson を使用したくない場合は、代わりに `rest-client-reactive` を使用してください。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:44
msgid "If you already have your Quarkus project configured, you can add the `rest-client-reactive-jackson` extension to your project by running the following command in your project base directory:"
msgstr "すでに Quarkus プロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `rest-client-reactive-jackson` エクステンションを追加することができます。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:49
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Block title
#: upstream/_guides/rest-client-reactive.adoc:51
#: upstream/_guides/rest-client-reactive.adoc:895
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:57
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-rest-client-reactive-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-rest-client-reactive-jackson</artifactId>\n"
"</dependency>\n"

#. type: Block title
#: upstream/_guides/rest-client-reactive.adoc:60
#: upstream/_guides/rest-client-reactive.adoc:905
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:63
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-rest-client-reactive-jackson\")\n"
msgstr "implementation(\"io.quarkus:quarkus-rest-client-reactive-jackson\")\n"

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:65
#, no-wrap
msgid "Setting up the model"
msgstr "モデルのセットアップ"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:69
msgid "In this guide we will be demonstrating how to consume part of the REST API supplied by the link:https://stage.code.quarkus.io[stage.code.quarkus.io] service.  Our first order of business is to set up the model we will be using, in the form of a `Extension` POJO."
msgstr "このガイドでは、 link:https://stage.code.quarkus.io[stage.code.quarkus.io] サービスが提供する REST API の一部を利用する方法をデモします。まず最初に、使用するモデルを `Extension` POJO の形式でセットアップします。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:71
msgid "Create a `src/main/java/org/acme/rest/client/Extension.java` file and set the following content:"
msgstr "`src/main/java/org/acme/rest/client/Extension.java` ファイルを作成し、以下の内容を設定します。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:75
#: upstream/_guides/rest-client-reactive.adoc:97
#: upstream/_guides/rest-client-reactive.adoc:145
#: upstream/_guides/rest-client-reactive.adoc:207
#: upstream/_guides/rest-client-reactive.adoc:247
#: upstream/_guides/rest-client-reactive.adoc:265
#: upstream/_guides/rest-client-reactive.adoc:301
#: upstream/_guides/rest-client-reactive.adoc:342
#: upstream/_guides/rest-client-reactive.adoc:368
#: upstream/_guides/rest-client-reactive.adoc:426
#: upstream/_guides/rest-client-reactive.adoc:451
#: upstream/_guides/rest-client-reactive.adoc:514
#: upstream/_guides/rest-client-reactive.adoc:555
#: upstream/_guides/rest-client-reactive.adoc:590
#, no-wrap
msgid "package org.acme.rest.client;\n"
msgstr "package org.acme.rest.client;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:77
#, no-wrap
msgid "import java.util.List;\n"
msgstr "import java.util.List;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:79
#, no-wrap
msgid "public class Extension {\n"
msgstr "public class Extension {\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:84
#, no-wrap
msgid ""
"    public String id;\n"
"    public String name;\n"
"    public String shortName;\n"
"    public List<String> keywords;\n"
msgstr ""
"    public String id;\n"
"    public String name;\n"
"    public String shortName;\n"
"    public List<String> keywords;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:86
#, no-wrap
msgid "}\n"
msgstr "}\n"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:89
msgid "The model above is only a subset of the fields provided by the service, but it suffices for the purposes of this guide."
msgstr "上記のモデルは、サービスによって提供されるフィールドのサブセットに過ぎませんが、このガイドの目的には十分です。"

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:90
#, no-wrap
msgid "Create the interface"
msgstr "インターフェースの作成"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:93
msgid "Using the REST Client Reactive is as simple as creating an interface using the proper JAX-RS and MicroProfile annotations. In our case the interface should be created at `src/main/java/org/acme/rest/client/ExtensionsService.java` and have the following content:"
msgstr "REST Client Reactive の使用は、適切な JAX-RS および MicroProfile アノテーションを使用してインターフェイスを作成するのと同じくらい簡単です。この場合、インターフェイスは `src/main/java/org/acme/rest/client/ExtensionsService.java` に作成され、次の内容が含まれている必要があります。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:99
#: upstream/_guides/rest-client-reactive.adoc:147
#: upstream/_guides/rest-client-reactive.adoc:344
#: upstream/_guides/rest-client-reactive.adoc:878
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
msgstr "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:104
#: upstream/_guides/rest-client-reactive.adoc:252
#: upstream/_guides/rest-client-reactive.adoc:434
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.QueryParam;\n"
"import java.util.Set;\n"
msgstr ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.QueryParam;\n"
"import java.util.Set;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:108
#: upstream/_guides/rest-client-reactive.adoc:157
#: upstream/_guides/rest-client-reactive.adoc:681
#, no-wrap
msgid ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient\n"
"public interface ExtensionsService {\n"
msgstr ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient\n"
"public interface ExtensionsService {\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:112
#: upstream/_guides/rest-client-reactive.adoc:259
#, no-wrap
msgid ""
"    @GET\n"
"    Set<Extension> getById(@QueryParam(\"id\") String id);\n"
"}\n"
msgstr ""
"    @GET\n"
"    Set<Extension> getById(@QueryParam(\"id\") String id);\n"
"}\n"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:115
msgid "The `getById` method gives our code the ability to get an extension by id from the Code Quarkus API. The client will handle all the networking and marshalling leaving our code clean of such technical details."
msgstr "`getById` メソッドは、私たちのコードに、Code Quarkus API からidを指定してエクステンションを問い合わせる機能を与えます。クライアントがすべてのネットワーキングとマーシャリングを処理してくれるので、このような技術的な詳細は一切ありません。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:117
msgid "The purpose of the annotations in the code above is the following:"
msgstr "上のコードのアノテーションの目的は以下の通りです。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:120
msgid "`@RegisterRestClient` allows Quarkus to know that this interface is meant to be available for CDI injection as a REST Client"
msgstr "`@RegisterRestClient` により、Quarkusは、このインターフェイスがRESTクライアントとしてCDIインジェクションに利用可能であることを知ることができます。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:121
msgid "`@Path`, `@GET` and `@PathParam` are the standard JAX-RS annotations used to define how to access the service"
msgstr "`@Path` 、 `@GET` 、 `@PathParam` は、サービスへのアクセス方法を定義するために使用される標準的な JAX-RS アノテーションです。"

#. type: delimited block =
#: upstream/_guides/rest-client-reactive.adoc:126
msgid "When the `quarkus-rest-client-reactive-jackson` extension is installed, Quarkus will use the `application/json` media type by default for most return values, unless the media type is explicitly set via `@Produces` or `@Consumes` annotations."
msgstr "`quarkus-rest-client-reactive-jackson` エクステンションがインストールされている場合、メディアタイプが `@Produces` または `@Consumes` アノテーションによって明示的に設定されていない限り、Quarkus はデフォルトでほとんどの戻り値に `application/json` メディアタイプを使用します。"

#. type: delimited block =
#: upstream/_guides/rest-client-reactive.adoc:129
msgid "If you don't rely on the JSON default, it is heavily recommended to annotate your endpoints with the `@Produces` and `@Consumes` annotations to define precisely the expected content-types.  It will allow to narrow down the number of JAX-RS providers (which can be seen as converters) included in the native executable."
msgstr "JSON のデフォルトに頼らない場合は、エンドポイントに `@Produces` や `@Consumes` のアノテーションを付けて、期待されるコンテンツタイプを正確に定義することを強くお勧めします。これにより、ネイティブ実行可能ファイルに含まれる JAX-RS プロバイダ (コンバータとみなすことができます) の数を絞り込むことができます。"

#. type: delimited block =
#: upstream/_guides/rest-client-reactive.adoc:135
msgid "The `getById` method above is a blocking call. It should not be invoked on the event loop.  The <<async-support>> section describes how to make non-blocking calls."
msgstr "上記の `getById` メソッドはブロッキング呼び出しです。イベントループで呼び出さないでください。The<<async-support>> セクションでは、非ブロッキング呼び出しを行う方法について説明します。"

#. type: Title ===
#: upstream/_guides/rest-client-reactive.adoc:137
#, no-wrap
msgid "Path Parameters"
msgstr "パスパラメーター"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:141
msgid "If the GET request requires path parameters you can leverage the `@PathParam(\"parameter-name\")` annotation instead of (or in addition to) the `@QueryParam`. Path and query parameters can be combined, as required, as illustrated in the example below."
msgstr "GET リクエストにパスパラメーターが必要な場合は、`@QueryParam` の代わりに (あるいは加えて) `@PathParam (\"parameter-name\")` アノテーションを使用することができます。パスパラメーターとクエリーパラメーターは、必要に応じて以下の例のように組み合わせることができます。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:153
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.PathParam;\n"
"import javax.ws.rs.QueryParam;\n"
"import java.util.Set;\n"
msgstr ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.PathParam;\n"
"import javax.ws.rs.QueryParam;\n"
"import java.util.Set;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:162
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/stream/{stream}\")\n"
"    Set<Extension> getByStream(@PathParam(\"stream\") String stream, @QueryParam(\"id\") String id);\n"
"}\n"
msgstr ""
"    @GET\n"
"    @Path(\"/stream/{stream}\")\n"
"    Set<Extension> getByStream(@PathParam(\"stream\") String stream, @QueryParam(\"id\") String id);\n"
"}\n"

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:165
#, no-wrap
msgid "Create the configuration"
msgstr "コンフィグレーションの作成"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:169
msgid "In order to determine the base URL to which REST calls will be made, the REST Client uses configuration from `application.properties`.  The name of the property needs to follow a certain convention which is best displayed in the following code:"
msgstr "REST 呼び出しが行われるベース URL を決定するために、REST クライアントは `application.properties` からの設定を使用します。プロパティーの名前は、以下のコードで表示される特定の規則に従う必要があります。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:174
#, no-wrap
msgid ""
"# Your configuration properties\n"
"quarkus.rest-client.\"org.acme.rest.client.ExtensionsService\".url=https://stage.code.quarkus.io/api # // <1>\n"
msgstr ""
"# Your configuration properties\n"
"quarkus.rest-client.\"org.acme.rest.client.ExtensionsService\".url=https://stage.code.quarkus.io/api # // <1>\n"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:178
msgid "Having this configuration means that all requests performed using `org.acme.rest.client.ExtensionsService` will use `https://stage.code.quarkus.io/api` as the base URL.  Using the configuration above, calling the `getById` method of `ExtensionsService` with a value of `io.quarkus:quarkus-rest-client-reactive` would result in an HTTP GET request being made to `https://stage.code.quarkus.io/api/extensions?id=io.quarkus:quarkus-rest-client-reactive`."
msgstr "この設定を行うと、`org.acme.rest.client.ExtensionsService` を使用して実行されるすべてのリクエストは、ベース URL として `https://stage.code.quarkus.io/api` を使用することを意味します。上記の設定を使用すると、`ExtensionsService` の `getById` メソッドを `io.quarkus:quarkus-rest-client-reactive` という値で呼び出すと、`https://stage.code.quarkus.io/api/extensions?id=io.quarkus:quarkus-rest-client-reactive` に HTTP GET リクエストが行われることになります。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:180
msgid "Note that `org.acme.rest.client.ExtensionsService` _must_ match the fully qualified name of the `ExtensionsService` interface we created in the previous section."
msgstr "`org.acme.rest.client.ExtensionsService` は、前のセクションで作成した`ExtensionsService` インターフェイスの完全修飾名と _一致しなければならない_ ことに注意してください。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:182
msgid "To facilitate the configuration, you can use the `@RegisterRestClient` `configKey` property that allows to use different configuration root than the fully qualified name of your interface."
msgstr "設定を容易にするために、`@RegisterRestClient` `configKey` プロパティーを使用して、インターフェイスの完全修飾名とは別の設定ルートを使用することができます。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:190
#, no-wrap
msgid ""
"@RegisterRestClient(configKey=\"extensions-api\")\n"
"public interface ExtensionsService {\n"
"    [...]\n"
"}\n"
msgstr ""
"@RegisterRestClient(configKey=\"extensions-api\")\n"
"public interface ExtensionsService {\n"
"    [...]\n"
"}\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:197
#, no-wrap
msgid ""
"# Your configuration properties\n"
"quarkus.rest-client.extensions-api.url=https://stage.code.quarkus.io/api\n"
"quarkus.rest-client.extensions-api.scope=javax.inject.Singleton\n"
msgstr ""
"# Your configuration properties\n"
"quarkus.rest-client.extensions-api.url=https://stage.code.quarkus.io/api\n"
"quarkus.rest-client.extensions-api.scope=javax.inject.Singleton\n"

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:199
#, no-wrap
msgid "Create the JAX-RS resource"
msgstr "JAX-RS リソースの作成"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:202
msgid "Create the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file with the following content:"
msgstr "`src/main/java/org/acme/rest/client/ExtensionsResource.java` ファイルを以下の内容で作成してください:"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:210
#: upstream/_guides/rest-client-reactive.adoc:371
#, no-wrap
msgid ""
"import io.smallrye.common.annotation.Blocking;\n"
"import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
msgstr ""
"import io.smallrye.common.annotation.Blocking;\n"
"import org.eclipse.microprofile.rest.client.inject.RestClient;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:214
#: upstream/_guides/rest-client-reactive.adoc:458
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import java.util.Set;\n"
msgstr ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import java.util.Set;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:217
#: upstream/_guides/rest-client-reactive.adoc:275
#: upstream/_guides/rest-client-reactive.adoc:379
#: upstream/_guides/rest-client-reactive.adoc:461
#, no-wrap
msgid ""
"@Path(\"/extension\")\n"
"public class ExtensionsResource {\n"
msgstr ""
"@Path(\"/extension\")\n"
"public class ExtensionsResource {\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:220
#, no-wrap
msgid ""
"    @RestClient // <1>\n"
"    ExtensionsService extensionsService;\n"
msgstr ""
"    @RestClient // <1>\n"
"    ExtensionsService extensionsService;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:229
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id/{id}\")\n"
"    @Blocking // <2>\n"
"    public Set<Extension> id(String id) {\n"
"        return extensionsService.getById(id);\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    @Path(\"/id/{id}\")\n"
"    @Blocking // <2>\n"
"    public Set<Extension> id(String id) {\n"
"        return extensionsService.getById(id);\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:232
msgid "There are two interesting parts in this listing:"
msgstr "このリストには 2 つの興味深い部分があります。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:234
msgid "the client stub is injected with the `@RestClient` annotation instead of the usual CDI `@Inject`"
msgstr "クライアントスタブには、通常の CDI `@Inject` ではなく、`@RestClient` アノテーションが挿入されます。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:235
msgid "the call we are making with the client is blocking, hence we need the `@Blocking` annotation on the REST endpoint"
msgstr "クライアントで行っている呼び出しがブロックされているため、REST エンドポイントに `@Blocking` アノテーションが必要です"

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:236
#, no-wrap
msgid "Programmatic client creation with RestClientBuilder"
msgstr "RestClientBuilder を使用したプログラムによるクライアントの作成"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:241
msgid "Instead of annotating the client with `@RegisterRestClient`, and injecting a client with `@RestClient`, you can also create REST Client programmatically.  You do that with `RestClientBuilder`."
msgstr "クライアントに `@RegisterRestClient` アノテーションを付け、クライアントに `@RestClient` を挿入する代わりに、プログラムで REST クライアントを作成することもできます。これは `RestClientBuilder` で行います。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:243
msgid "With this approach the client interface could look as follows:"
msgstr "このアプローチでは、クライアントインターフェイスは次のようになります。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:255
#, no-wrap
msgid ""
"@Path(\"/extensions\")\n"
"public interface ExtensionsService {\n"
msgstr ""
"@Path(\"/extensions\")\n"
"public interface ExtensionsService {\n"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:262
msgid "And the service as follows:"
msgstr "そして、次のようなサービス:"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:267
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.RestClientBuilder;\n"
msgstr "import org.eclipse.microprofile.rest.client.RestClientBuilder;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:272
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import java.net.URI;\n"
"import java.util.Set;\n"
msgstr ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import java.net.URI;\n"
"import java.util.Set;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:277
#, no-wrap
msgid "    private final ExtensionsService extensionsService;\n"
msgstr "    private final ExtensionsService extensionsService;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:283
#, no-wrap
msgid ""
"    public ExtensionsResource() {\n"
"        extensionsService = RestClientBuilder.newBuilder()\n"
"            .baseUri(URI.create(\"https://stage.code.quarkus.io/api\"))\n"
"            .build(ExtensionsService.class);\n"
"    }\n"
msgstr ""
"    public ExtensionsResource() {\n"
"        extensionsService = RestClientBuilder.newBuilder()\n"
"            .baseUri(URI.create(\"https://stage.code.quarkus.io/api\"))\n"
"            .build(ExtensionsService.class);\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:290
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id/{id}\")\n"
"    public Set<Extension> id(String id) {\n"
"        return extensionsService.getById(id);\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    @Path(\"/id/{id}\")\n"
"    public Set<Extension> id(String id) {\n"
"        return extensionsService.getById(id);\n"
"    }\n"
"}\n"

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:292
#, no-wrap
msgid "Update the test"
msgstr "テストの更新"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:296
msgid "Next, we need to update the functional test to reflect the changes made to the endpoint.  Edit the `src/test/java/org/acme/rest/client/ExtensionsResourceTest.java` file and change the content of the test to:"
msgstr "次に、エンドポイントに加えられた変更を反映させるために、機能テストを更新する必要があります。`src/test/java/org/acme/rest/client/ExtensionsResourceTest.java` ファイルを編集し、テストの内容を以下のように変更します。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:303
#, no-wrap
msgid "import io.quarkus.test.junit.QuarkusTest;\n"
msgstr "import io.quarkus.test.junit.QuarkusTest;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:305
#, no-wrap
msgid "import org.junit.jupiter.api.Test;\n"
msgstr "import org.junit.jupiter.api.Test;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:310
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.hasItem;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
"import static org.hamcrest.Matchers.greaterThan;\n"
msgstr ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.hasItem;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
"import static org.hamcrest.Matchers.greaterThan;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:313
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class ExtensionsResourceTest {\n"
msgstr ""
"@QuarkusTest\n"
"public class ExtensionsResourceTest {\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:327
#, no-wrap
msgid ""
"    @Test\n"
"    public void testExtensionsIdEndpoint() {\n"
"        given()\n"
"            .when().get(\"/extension/id/io.quarkus:quarkus-rest-client-reactive\")\n"
"            .then()\n"
"            .statusCode(200)\n"
"            .body(\"$.size()\", is(1),\n"
"                \"[0].id\", is(\"io.quarkus:quarkus-rest-client-reactive\"),\n"
"                \"[0].name\", is(\"REST Client Reactive\"),\n"
"                \"[0].keywords.size()\", greaterThan(1),\n"
"                \"[0].keywords\", hasItem(\"rest-client\"));\n"
"    }\n"
"}\n"
msgstr ""
"    @Test\n"
"    public void testExtensionsIdEndpoint() {\n"
"        given()\n"
"            .when().get(\"/extension/id/io.quarkus:quarkus-rest-client-reactive\")\n"
"            .then()\n"
"            .statusCode(200)\n"
"            .body(\"$.size()\", is(1),\n"
"                \"[0].id\", is(\"io.quarkus:quarkus-rest-client-reactive\"),\n"
"                \"[0].name\", is(\"REST Client Reactive\"),\n"
"                \"[0].keywords.size()\", greaterThan(1),\n"
"                \"[0].keywords\", hasItem(\"rest-client\"));\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:330
msgid "The code above uses link:http://rest-assured.io/[REST Assured]'s link:https://github.com/rest-assured/rest-assured/wiki/GettingStarted#jsonpath[json-path] capabilities."
msgstr "上のコードでは、 link:http://rest-assured.io/[REST Assured] の link:https://github.com/rest-assured/rest-assured/wiki/GettingStarted#jsonpath[json-path] 機能を使用しています。"

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:333
#, no-wrap
msgid "Async Support"
msgstr "非同期サポート"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:338
msgid "To get the full power of the reactive nature of the client, you can use the non-blocking flavor of REST Client Reactive extension, which comes with support for `CompletionStage` and `Uni`.  Let's see it in action by adding a `getByIdAsync` method in our `ExtensionsService` REST interface. The code should look like:"
msgstr "クライアントのリアクティブな性質を最大限に活用するには、REST Client Reactive エクステンションのノンブロッキングフレーバーを使用するとよいでしょう。このエクステンションは `CompletionStage` と `Uni` をサポートしています。それでは、実際に `ExtensionsService` REST インターフェイスに `getByIdAsync` メソッドを追加して、この動きを見てみましょう。コードは以下のようになります。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:350
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.QueryParam;\n"
"import java.util.Set;\n"
"import java.util.concurrent.CompletionStage;\n"
msgstr ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.QueryParam;\n"
"import java.util.Set;\n"
"import java.util.concurrent.CompletionStage;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:354
#: upstream/_guides/rest-client-reactive.adoc:438
#, no-wrap
msgid ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient(configKey = \"extensions-api\")\n"
"public interface ExtensionsService {\n"
msgstr ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient(configKey = \"extensions-api\")\n"
"public interface ExtensionsService {\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:357
#: upstream/_guides/rest-client-reactive.adoc:633
#: upstream/_guides/rest-client-reactive.adoc:684
#, no-wrap
msgid ""
"    @GET\n"
"    Set<Extension> getById(@QueryParam(\"id\") String id);\n"
msgstr ""
"    @GET\n"
"    Set<Extension> getById(@QueryParam(\"id\") String id);\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:361
#: upstream/_guides/rest-client-reactive.adoc:637
#, no-wrap
msgid ""
"    @GET\n"
"    CompletionStage<Set<Extension>> getByIdAsync(@QueryParam(\"id\") String id);\n"
"}\n"
msgstr ""
"    @GET\n"
"    CompletionStage<Set<Extension>> getByIdAsync(@QueryParam(\"id\") String id);\n"
"}\n"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:364
msgid "Open the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file and update it with the following content:"
msgstr "`src/main/java/org/acme/rest/client/ExtensionsResource.java` ファイルを開き、以下の内容で更新してください。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:376
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import java.util.Set;\n"
"import java.util.concurrent.CompletionStage;\n"
msgstr ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import java.util.Set;\n"
"import java.util.concurrent.CompletionStage;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:382
#: upstream/_guides/rest-client-reactive.adoc:464
#, no-wrap
msgid ""
"    @RestClient\n"
"    ExtensionsService extensionsService;\n"
msgstr ""
"    @RestClient\n"
"    ExtensionsService extensionsService;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:390
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id/{id}\")\n"
"    @Blocking\n"
"    public Set<Extension> id(String id) {\n"
"        return extensionsService.getById(id);\n"
"    }\n"
msgstr ""
"    @GET\n"
"    @Path(\"/id/{id}\")\n"
"    @Blocking\n"
"    public Set<Extension> id(String id) {\n"
"        return extensionsService.getById(id);\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:397
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id-async/{id}\")\n"
"    public CompletionStage<Set<Extension>> idAsync(String id) {\n"
"        return extensionsService.getByIdAsync(id);\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    @Path(\"/id-async/{id}\")\n"
"    public CompletionStage<Set<Extension>> idAsync(String id) {\n"
"        return extensionsService.getByIdAsync(id);\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:402
msgid "Please note that since the invocation is now non-blocking, we don't need the `@Blocking` annotation anymore on the endpoint.  This means that the `idAsync` method will be invoked on the event loop, i.e. will not get offloaded to a worker pool thread and thus reducing hardware resource utilization."
msgstr "呼び出しがノンブロッキングになったので、エンドポイントに `@Blocking` アノテーションが不要になったことに注意してください。これは、`idAsync` メソッドがイベントループで呼び出されることを意味します。つまり、ワーカープールのスレッドにオフロードされないので、ハードウェアリソースの使用量を減らすことができます。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:405
msgid "To test asynchronous methods, add the test method below in `ExtensionsResourceTest`:"
msgstr "非同期メソッドをテストするには、`ExtensionsResourceTest` に以下のテストメソッドを追加します。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:419
#, no-wrap
msgid ""
"@Test\n"
"public void testExtensionIdAsyncEndpoint() {\n"
"    given()\n"
"        .when().get(\"/extension/id-async/io.quarkus:quarkus-rest-client-reactive\")\n"
"        .then()\n"
"        .statusCode(200)\n"
"        .body(\"$.size()\", is(1),\n"
"            \"[0].id\", is(\"io.quarkus:quarkus-rest-client-reactive\"),\n"
"            \"[0].name\", is(\"REST Client Reactive\"),\n"
"            \"[0].keywords.size()\", greaterThan(1),\n"
"            \"[0].keywords\", hasItem(\"rest-client\"));\n"
"}\n"
msgstr ""
"@Test\n"
"public void testExtensionIdAsyncEndpoint() {\n"
"    given()\n"
"        .when().get(\"/extension/id-async/io.quarkus:quarkus-rest-client-reactive\")\n"
"        .then()\n"
"        .statusCode(200)\n"
"        .body(\"$.size()\", is(1),\n"
"            \"[0].id\", is(\"io.quarkus:quarkus-rest-client-reactive\"),\n"
"            \"[0].name\", is(\"REST Client Reactive\"),\n"
"            \"[0].keywords.size()\", greaterThan(1),\n"
"            \"[0].keywords\", hasItem(\"rest-client\"));\n"
"}\n"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:422
msgid "The `Uni` version is very similar:"
msgstr "`Uni` 版は非常に似ています。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:429
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
msgstr ""
"import io.smallrye.mutiny.Uni;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:440
#: upstream/_guides/rest-client-reactive.adoc:467
#, no-wrap
msgid "    // ...\n"
msgstr "    // ...\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:444
#, no-wrap
msgid ""
"    @GET\n"
"    Uni<Set<Extension>> getByIdAsUni(@QueryParam(\"id\") String id);\n"
"}\n"
msgstr ""
"    @GET\n"
"    Uni<Set<Extension>> getByIdAsUni(@QueryParam(\"id\") String id);\n"
"}\n"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:447
msgid "The `ExtensionsResource` becomes:"
msgstr "`ExtensionsResource` は次のようになります。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:454
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
msgstr ""
"import io.smallrye.mutiny.Uni;\n"
"import org.eclipse.microprofile.rest.client.inject.RestClient;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:474
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/id-uni/{id}\")\n"
"    public Uni<Set<Extension>> idUni(String id) {\n"
"        return extensionsService.getByIdAsUni(id);\n"
"    }\n"
"}\n"
msgstr ""
"    @GET\n"
"    @Path(\"/id-uni/{id}\")\n"
"    public Uni<Set<Extension>> idUni(String id) {\n"
"        return extensionsService.getByIdAsUni(id);\n"
"    }\n"
"}\n"

#. type: Block title
#: upstream/_guides/rest-client-reactive.adoc:477
#, no-wrap
msgid "Mutiny"
msgstr "Mutiny"

#. type: delimited block =
#: upstream/_guides/rest-client-reactive.adoc:481
msgid "The previous snippet uses Mutiny reactive types.  If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "前のスニペットでは、Mutinyのリアクティブ型を使用していますが、もし慣れていない場合は、まず xref:mutiny-primer.adoc[Mutiny - 直感的なリアクティブプログラミングライブラリ] を読んでください。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:485
msgid "When returning a `Uni`, every _subscription_ invokes the remote service.  It means you can re-send the request by re-subscribing on the `Uni`, or use a `retry` as follows:"
msgstr "`Uni` を返すとき、すべての _サブスクリプション_ は 、リモートサービスを呼び出します。つまり、 `Uni` で再購読してリクエストを再送信するか、以下のように `retry` を使用することができます。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:490
#, no-wrap
msgid "@RestClient ExtensionsService extensionsService;\n"
msgstr "@RestClient ExtensionsService extensionsService;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:492
#, no-wrap
msgid "// ...\n"
msgstr "// ...\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:495
#, no-wrap
msgid ""
"extensionsService.getByIdAsUni(id)\n"
"    .onFailure().retry().atMost(10);\n"
msgstr ""
"extensionsService.getByIdAsUni(id)\n"
"    .onFailure().retry().atMost(10);\n"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:500
msgid "If you use a `CompletionStage`, you would need to call the service's method to retry.  This difference comes from the laziness aspect of Mutiny and its subscription protocol.  More details about this can be found in https://smallrye.io/smallrye-mutiny/#_uni_and_multi[the Mutiny documentation]."
msgstr "`CompletionStage` を使用する場合は、サービスのメソッドを呼び出して再試行する必要があります。この違いは、Mutinyとそのサブスクリプションプロトコルの lazy 性の側面から来ています。これについての詳細は Mutiny の link:https://smallrye.io/smallrye-mutiny/#_uni_and_multi[ドキュメント] を参照してください。"

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:501
#, no-wrap
msgid "Custom headers support"
msgstr "カスタムヘッダーのサポート"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:504
msgid "There are a few ways in which you can specify custom headers for your REST calls:"
msgstr "REST 呼び出しのカスタムヘッダーを指定する方法はいくつかあります。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:506
msgid "by registering a `ClientHeadersFactory` or a `ReactiveClientHeadersFactory` with the `@RegisterClientHeaders` annotation"
msgstr "`@RegisterClientHeaders` アノテーションを用いて `ClientHeadersFactory` または `ReactiveClientHeadersFactory` を登録する。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:507
msgid "by specifying the value of the header with `@ClientHeaderParam`"
msgstr "`@ClientHeaderParam` でヘッダーの値を指定する"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:508
msgid "by specifying the value of the header by `@HeaderParam`"
msgstr "`@HeaderParam` でヘッダーの値を指定する"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:510
msgid "The code below demonstrates how to use each of these techniques:"
msgstr "以下のコードは、これらの各手法の使用方法を示しています。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:518
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.ClientHeaderParam;\n"
"import org.eclipse.microprofile.rest.client.annotation.RegisterClientHeaders;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.annotation.ClientHeaderParam;\n"
"import org.eclipse.microprofile.rest.client.annotation.RegisterClientHeaders;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:524
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.HeaderParam;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.QueryParam;\n"
"import java.util.Set;\n"
msgstr ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.HeaderParam;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.QueryParam;\n"
"import java.util.Set;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:531
#, no-wrap
msgid ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient\n"
"@RegisterClientHeaders(RequestUUIDHeaderFactory.class) // <1>\n"
"@ClientHeaderParam(name = \"my-header\", value = \"constant-header-value\") // <2>\n"
"@ClientHeaderParam(name = \"computed-header\", value = \"{org.acme.rest.client.Util.computeHeader}\") // <3>\n"
"public interface ExtensionsService {\n"
msgstr ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient\n"
"@RegisterClientHeaders(RequestUUIDHeaderFactory.class) // <1>\n"
"@ClientHeaderParam(name = \"my-header\", value = \"constant-header-value\") // <2>\n"
"@ClientHeaderParam(name = \"computed-header\", value = \"{org.acme.rest.client.Util.computeHeader}\") // <3>\n"
"public interface ExtensionsService {\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:536
#, no-wrap
msgid ""
"    @GET\n"
"    @ClientHeaderParam(name = \"header-from-properties\", value = \"${header.value}\") // <4>\n"
"    Set<Extension> getById(@QueryParam(\"id\") String id, @HeaderParam(\"jaxrs-style-header\") String headerValue); // <5>\n"
"}\n"
msgstr ""
"    @GET\n"
"    @ClientHeaderParam(name = \"header-from-properties\", value = \"${header.value}\") // <4>\n"
"    Set<Extension> getById(@QueryParam(\"id\") String id, @HeaderParam(\"jaxrs-style-header\") String headerValue); // <5>\n"
"}\n"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:539
msgid "There can be only one `ClientHeadersFactory` per class. With it, you can not only add custom headers, but you can also transform existing ones. See the `RequestUUIDHeaderFactory` class below for an example of the factory."
msgstr "クラスごとに存在できる `ClientHeadersFactory` は 1 つだけです。これを使用すると、カスタムヘッダーを追加できるだけでなく、既存のヘッダーを変換することもできます。ファクトリーの例については、以下の `RequestUUIDHeaderFactory` クラスを参照してください。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:540
msgid "`@ClientHeaderParam` can be used on the client interface and on methods. It can specify a constant header value..."
msgstr "`@ClientHeaderParam` は、クライアントインターフェイスとメソッドで使用できます。一定のヘッダー値を指定できます。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:541
msgid "... and a name of a method that should compute the value of the header. It can either be a static method or a default method in this interface"
msgstr "そして、ヘッダーの値を計算するメソッドの名前を指定します。このインターフェイスでは、静的メソッドまたはデフォルトメソッドのいずれかです。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:542
msgid "... as well as a value from your application's configuration"
msgstr "また、アプリケーションの設定値も使用します。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:543
msgid "... or as a normal JAX-RS `@HeaderParam` annotated argument"
msgstr "あるいは、通常の JAX-RS の `@HeaderParam` アノテーションされた引数として使用します。"

#. type: delimited block =
#: upstream/_guides/rest-client-reactive.adoc:548
msgid "When using Kotlin, if default methods are going to be leveraged, then the Kotlin compiler needs to be configured to use Java's default interface capabilities.  See link:https://kotlinlang.org/docs/java-to-kotlin-interop.html#default-methods-in-interfaces[this] for more details."
msgstr "Kotlin を使用するときにデフォルトのメソッドを利用する場合は、Java のデフォルトのインターフェイス機能を使用するように Kotlin コンパイラーを設定する必要があります。詳細は、link:https://kotlinlang.org/docs/java-to-kotlin-interop.html#default-methods-in-interfaces[this] for more details. を参照してください。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:551
msgid "A `ClientHeadersFactory` can look as follows:"
msgstr "`ClientHeadersFactory` は次のようになります。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:557
#: upstream/_guides/rest-client-reactive.adoc:594
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.ext.ClientHeadersFactory;\n"
msgstr "import org.eclipse.microprofile.rest.client.ext.ClientHeadersFactory;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:562
#: upstream/_guides/rest-client-reactive.adoc:599
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.ws.rs.core.MultivaluedHashMap;\n"
"import javax.ws.rs.core.MultivaluedMap;\n"
"import java.util.UUID;\n"
msgstr ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.ws.rs.core.MultivaluedHashMap;\n"
"import javax.ws.rs.core.MultivaluedMap;\n"
"import java.util.UUID;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:565
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class RequestUUIDHeaderFactory implements ClientHeadersFactory {\n"
msgstr ""
"@ApplicationScoped\n"
"public class RequestUUIDHeaderFactory implements ClientHeadersFactory {\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:573
#, no-wrap
msgid ""
"    @Override\n"
"    public MultivaluedMap<String, String> update(MultivaluedMap<String, String> incomingHeaders, MultivaluedMap<String, String> clientOutgoingHeaders) {\n"
"        MultivaluedMap<String, String> result = new MultivaluedHashMap<>();\n"
"        result.add(\"X-request-uuid\", UUID.randomUUID().toString());\n"
"        return result;\n"
"    }\n"
"}\n"
msgstr ""
"    @Override\n"
"    public MultivaluedMap<String, String> update(MultivaluedMap<String, String> incomingHeaders, MultivaluedMap<String, String> clientOutgoingHeaders) {\n"
"        MultivaluedMap<String, String> result = new MultivaluedHashMap<>();\n"
"        result.add(\"X-request-uuid\", UUID.randomUUID().toString());\n"
"        return result;\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:577
msgid "As you see in the example above, you can make your `ClientHeadersFactory` implementation a CDI bean by annotating it with a scope-defining annotation, such as `@Singleton`, `@ApplicationScoped`, etc."
msgstr "上の例のように、 `@Singleton`, `@ApplicationScoped` などのスコープを定義するアノテーションを付けることで、 `ClientHeadersFactory` の実装をCDI Beanにすることができます。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:579
msgid "To specify a value for `${header.value}`, simply put the following in your `application.properties`:"
msgstr "`${header.value}` に値を指定するには、`application.properties` に以下のように記述するだけです。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:583
#, no-wrap
msgid "header.value=value of the header\n"
msgstr "header.value=value of the header\n"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:586
msgid "Also, there is a reactive flavor of `ClientHeadersFactory` that allows doing blocking operations. For example:"
msgstr "また、ブロッキング操作を実行できる `ClientHeadersFactory` のリアクティブフレーバーがあります。例えば:"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:592
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr "import io.smallrye.mutiny.Uni;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:602
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class GetTokenReactiveClientHeadersFactory extends ReactiveClientHeadersFactory {\n"
msgstr ""
"@ApplicationScoped\n"
"public class GetTokenReactiveClientHeadersFactory extends ReactiveClientHeadersFactory {\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:605
#, no-wrap
msgid ""
"    @Inject\n"
"    Service service;\n"
msgstr ""
"    @Inject\n"
"    Service service;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:618
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<MultivaluedMap<String, String>> getHeaders(\n"
"            MultivaluedMap<String, String> incomingHeaders,\n"
"            MultivaluedMap<String, String> clientOutgoingHeaders);\n"
"        return Uni.createFrom().item(() -> {\n"
"            MultivaluedHashMap<String, String> newHeaders = new MultivaluedHashMap<>();\n"
"            // perform blocking call\n"
"            newHeaders.add(HEADER_NAME, service.getToken());\n"
"            return newHeaders;\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""
"    @Override\n"
"    public Uni<MultivaluedMap<String, String>> getHeaders(\n"
"            MultivaluedMap<String, String> incomingHeaders,\n"
"            MultivaluedMap<String, String> clientOutgoingHeaders);\n"
"        return Uni.createFrom().item(() -> {\n"
"            MultivaluedHashMap<String, String> newHeaders = new MultivaluedHashMap<>();\n"
"            // perform blocking call\n"
"            newHeaders.add(HEADER_NAME, service.getToken());\n"
"            return newHeaders;\n"
"        });\n"
"    }\n"
"}\n"

#. type: Title ===
#: upstream/_guides/rest-client-reactive.adoc:620
#, no-wrap
msgid "Default header factory"
msgstr "デフォルトのヘッダーファクトリー"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:624
msgid "The `@RegisterClientHeaders` annotation can also be used without any custom factory specified. In that case the `DefaultClientHeadersFactoryImpl` factory will be used.  If you make a REST client call from a REST resource, this factory will propagate all the headers listed in `org.eclipse.microprofile.rest.client.propagateHeaders` configuration property from the resource request to the client request. Individual header names are comma-separated."
msgstr "`@RegisterClientHeaders` アノテーションは、カスタムファクトリーを指定せずに使用することもできます。その場合、`DefaultClientHeadersFactoryImpl` ファクトリーが使用されます。REST リソースから REST クライアント呼び出しを行う場合、このファクトリーは、`org.eclipse.microprofile.rest.client.propagateHeaders` 設定プロパティーにリストされているすべてのヘッダーをリソースリクエストからクライアントリクエストに伝播させます。個々のヘッダー名はコンマで区切られます。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:630
#, no-wrap
msgid ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient\n"
"@RegisterClientHeaders\n"
"public interface ExtensionsService {\n"
msgstr ""
"@Path(\"/extensions\")\n"
"@RegisterRestClient\n"
"@RegisterClientHeaders\n"
"public interface ExtensionsService {\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:642
#, no-wrap
msgid "org.eclipse.microprofile.rest.client.propagateHeaders=Authorization,Proxy-Authorization\n"
msgstr "org.eclipse.microprofile.rest.client.propagateHeaders=Authorization,Proxy-Authorization\n"

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:644
#, no-wrap
msgid "Exception handling"
msgstr "例外処理"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:647
msgid "The MicroProfile REST Client specification introduces the `org.eclipse.microprofile.rest.client.ext.ResponseExceptionMapper` whose purpose is to convert an HTTP response to an exception."
msgstr "MicroProfile REST クライアント仕様では、HTTP 応答を例外に変換することを目的とした`org.eclipse.microprofile.rest.client.ext.ResponseExceptionMapper` が導入されています。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:649
msgid "A simple example of implementing such a `ResponseExceptionMapper` for the `ExtensionsService` discussed above, could be:"
msgstr "上記の `ExtensionsService` にこのような `ResponseExceptionMapper` を実装する簡単な例は、次のとおりです。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:653
#, no-wrap
msgid "public class MyResponseExceptionMapper implements ResponseExceptionMapper<RuntimeException> {\n"
msgstr "パブリッククラス MyResponseExceptionMapper は ResponseExceptionMapper を実装します <RuntimeException> {\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:662
#, no-wrap
msgid ""
"    @Override\n"
"    public RuntimeException toThrowable(Response response) {\n"
"        if (response.getStatus() == 500) {\n"
"            throw new RuntimeException(\"The remote service responded with HTTP 500\");\n"
"        }\n"
"        return null;\n"
"    }\n"
"}\n"
msgstr ""
"    @Override\n"
"    public RuntimeException toThrowable(Response response) {\n"
"        if (response.getStatus() == 500) {\n"
"            throw new RuntimeException(\"The remote service responded with HTTP 500\");\n"
"        }\n"
"        return null;\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:666
msgid "`ResponseExceptionMapper` also defines the `getPriority` method which is used in order to determine the priority with which `ResponseExceptionMapper` implementations will be called (implementations with a lower value for `getPriority` will be invoked first).  If `toThrowable` returns an exception, then that exception will be thrown. If `null` is returned, the next implementation of `ResponseExceptionMapper` in the chain will be called (if there is any)."
msgstr "`ResponseExceptionMapper` は、`ResponseExceptionMapper` 実装が呼び出される優先度を決定するために使用される `getPriority` メソッドも定義します (`getPriority` の値が小さい実装が最初に呼び出されます)。`toThrowable` が例外を返す場合、その例外が出力されます。`null` が返された場合、チェーン内の `ResponseExceptionMapper` の次の実装が呼び出されます (存在する場合)。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:669
msgid "The class as written above, would not be automatically be used by any REST Client. To make it available to every REST Client of the application, the class needs to be annotated with `@Provider` (as long as `quarkus.rest-client-reactive.provider-autodiscovery` is not set to `false`).  Alternatively, if the exception handling class should only apply to specific REST Client interfaces, you can either annotate the interfaces with `@RegisterProvider(MyResponseExceptionMapper.class)`, or register it using configuration using the `providers` property of the proper `quarkus.rest-client` configuration group."
msgstr "上記のクラスは、REST クライアントによって自動的に使用されることはありません。アプリケーションのすべての REST クライアントで使用できるようにするには、クラスに `@Provider` アノテーションを付ける必要があります (`quarkus.rest-client-reactive.provider-autodiscovery` が `false` に設定されていない場合)。または、例外処理クラスを特定の REST クライアントインターフェイスにのみ適用する必要がある場合は、インターフェイスに `@RegisterProvider(MyResponseExceptionMapper.class)` でアノテーションを付けるか、適切な `quarkus.rest-client` 設定グループの `providers` プロパティー設定を使用して登録できます。"

#. type: Title ===
#: upstream/_guides/rest-client-reactive.adoc:670
#, no-wrap
msgid "Using @ClientExceptionMapper"
msgstr "@ClientExceptionMapper を使用する"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:673
msgid "A simpler way to convert HTTP response codes of 400 or above is to use the `@ClientExceptionMapper` annotation."
msgstr "400 以上の HTTP 応答コードを変換する簡単な方法は、`@ClientExceptionMapper` アノテーションを使用することです。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:675
msgid "For the `ExtensionsService` REST Client interface defined above, an example use of `@ClientExceptionMapper` would be:"
msgstr "上記で定義された `ExtensionsService` REST クライアントインターフェイスの場合、`@ClientExceptionMapper` の使用例は次のようになります。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:687
#, no-wrap
msgid ""
"    @GET\n"
"    CompletionStage<Set<Extension>> getByIdAsync(@QueryParam(\"id\") String id);\n"
msgstr ""
"    @GET\n"
"    CompletionStage<Set<Extension>> getByIdAsync(@QueryParam(\"id\") String id);\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:696
#, no-wrap
msgid ""
"    @ClientExceptionMapper\n"
"    static RuntimeException toException(Response response) {\n"
"        if (response.getStatus() == 500) {\n"
"            return new RuntimeException(\"The remote service responded with HTTP 500\");\n"
"        }\n"
"        return null;\n"
"    }\n"
"}\n"
msgstr ""
"    @ClientExceptionMapper\n"
"    static RuntimeException toException(Response response) {\n"
"        if (response.getStatus() == 500) {\n"
"            return new RuntimeException(\"The remote service responded with HTTP 500\");\n"
"        }\n"
"        return null;\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:699
msgid "Naturally this handling is per REST Client. `@ClientExceptionMapper` uses the default priority if the `priority` attribute is not set and the normal rules of invoking all handlers in turn apply."
msgstr "当然、この処理は REST クライアントごとに行われます。`@ClientExceptionMapper` は、`priority` 属性が設定されておらず、すべてのハンドラーを呼び出す通常のルールが適用される場合、デフォルトの優先度を使用します。"

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:701
#, no-wrap
msgid "Multipart Form support"
msgstr "マルチパートフォームのサポート"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:704
msgid "REST Client Reactive support multipart messages."
msgstr "REST Client Reactive はマルチパートメッセージをサポートします。"

#. type: Title ===
#: upstream/_guides/rest-client-reactive.adoc:705
#, no-wrap
msgid "Sending Multipart messages"
msgstr "マルチパートメッセージの送信"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:709
msgid "REST Client Reactive allows sending data as multipart forms. This way you can for example send files efficiently."
msgstr "REST Client Reactive を使用すると、データをマルチパート形式で送信できます。このようにして、たとえばファイルを効率的に送信できます。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:712
msgid "To send data as a multipart form, you need to create a class that would encapsulate all the fields to be sent, e.g."
msgstr "マルチパートフォームとしてデータを送信するには、送信するすべてのフィールドをカプセル化するクラスを作成する必要があります。例えば、次のようにします。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:719
#, no-wrap
msgid ""
"public class FormDto {\n"
"    @FormParam(\"file\")\n"
"    @PartType(MediaType.APPLICATION_OCTET_STREAM)\n"
"    public File file;\n"
msgstr ""
"public class FormDto {\n"
"    @FormParam(\"file\")\n"
"    @PartType(MediaType.APPLICATION_OCTET_STREAM)\n"
"    public File file;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:724
#, no-wrap
msgid ""
"    @FormParam(\"otherField\")\n"
"    @PartType(MediaType.TEXT_PLAIN)\n"
"    public String textProperty;\n"
"}\n"
msgstr ""
"    @FormParam(\"otherField\")\n"
"    @PartType(MediaType.TEXT_PLAIN)\n"
"    public String textProperty;\n"
"}\n"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:727
msgid "The method that sends a form needs to specify multipart form data as the consumed media type, e.g."
msgstr "フォームを送信するメソッドは、消費されたメディアタイプとしてマルチパートフォームデータを指定する必要があります。例えば、次のようにします。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:734
#, no-wrap
msgid ""
"    @POST\n"
"    @Consumes(MediaType.MULTIPART_FORM_DATA)\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"/binary\")\n"
"    String sendMultipart(@MultipartForm FormDto data);\n"
msgstr ""
"    @POST\n"
"    @Consumes(MediaType.MULTIPART_FORM_DATA)\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"/binary\")\n"
"    String sendMultipart(@MultipartForm FormDto data);\n"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:739
msgid "Fields specified as `File`, `Path`, `byte[]` or `Buffer` are sent as files; as binary files for `@PartType(MediaType.APPLICATION_OCTET_STREAM)`, as text files for other content types.  Other fields are sent as form attributes."
msgstr "File`、`Path`、`byte[]` または `Buffer` として指定されたフィールドはファイルとして送信されます。`@PartType(MediaType.APPLICATION_OCTET_STREAM)` の場合はバイナリーファイル、その他のコンテンツタイプの場合はテキストファイルとして送信されます。その他のフィールドはフォームの属性として送信されます。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:749
msgid "There are a few modes in which the form data can be encoded. By default, Rest Client Reactive uses RFC1738.  You can override it by specifying the mode either on the client level, by setting `io.quarkus.rest.client.multipart-post-encoder-mode` RestBuilder property to the selected value of `HttpPostRequestEncoder.EncoderMode` or by specifying `quarkus.rest-client.multipart-post-encoder-mode` in your `application.properties`. Please note that the latter works only for clients created with the `@RegisterRestClient` annotation.  All the available modes are described in the link:https://netty.io/4.1/api/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.EncoderMode.html[Netty documentation]"
msgstr "フォームデータのエンコードには、いくつかのモードがあります。デフォルトでは、Rest Client Reactive は RFC1738 を使用します。クライアントレベルで、`io.quarkus.rest.client.multipart-post-encoder-mode` RestBuilder プロパティーを `HttpPostRequestEncoder.EncoderMode` の選択した値に設定するか、`application.properties` で `quarkus.rest-client.multipart-post-encoder-mode` を指定して、モードを上書きすることができます。後者は`@RegisterRestClient` アノテーションで作成されたクライアントに対してのみ機能することに注意してください。利用可能なすべてのモードは、link:https://netty.io/4.1/api/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.EncoderMode.html[Netty documentation] に記載されています。"

#. type: Title ===
#: upstream/_guides/rest-client-reactive.adoc:750
#, no-wrap
msgid "Receiving Multipart Messages"
msgstr "マルチパートメッセージの受信"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:753
msgid "REST Client Reactive also supports receiving multipart messages.  As with sending, to parse a multipart response, you need to create a class that describes the response data, e.g."
msgstr "REST Client Reactive は、マルチパートメッセージの受信もサポートしています。送信と同様に、マルチパートレスポンスを解析するには、レスポンスデータを記述するクラスを作成する必要があります。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:760
#, no-wrap
msgid ""
"public class FormDto {\n"
"    @RestForm // <1>\n"
"    @PartType(MediaType.APPLICATION_OCTET_STREAM)\n"
"    public File file;\n"
msgstr ""
"public class FormDto {\n"
"    @RestForm // <1>\n"
"    @PartType(MediaType.APPLICATION_OCTET_STREAM)\n"
"    public File file;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:765
#, no-wrap
msgid ""
"    @FormParam(\"otherField\") // <2>\n"
"    @PartType(MediaType.TEXT_PLAIN)\n"
"    public String textProperty;\n"
"}\n"
msgstr ""
"    @FormParam(\"otherField\") // <2>\n"
"    @PartType(MediaType.TEXT_PLAIN)\n"
"    public String textProperty;\n"
"}\n"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:767
msgid "uses the shorthand `@RestForm` annotation to make a field as a part of a multipart form"
msgstr "省略形の `@RestForm` アノテーションを使用して、マルチパートフォームの一部としてフィールドを作成します"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:768
msgid "the standard `@FormParam` can also be used. It allows to override the name of the multipart part."
msgstr "標準の `@FormParam` も使用できます。マルチパートパートの名前を上書きできます。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:770
msgid "Then, create an interface method that corresponds to the call and make it return the `FormDto`:"
msgstr "次に、呼び出しに対応するインターフェイスメソッドを作成し、`FormDto` を返すようにします。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:776
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.MULTIPART_FORM_DATA)\n"
"    @Path(\"/get-file\")\n"
"    FormDto data sendMultipart();\n"
msgstr ""
"    @GET\n"
"    @Produces(MediaType.MULTIPART_FORM_DATA)\n"
"    @Path(\"/get-file\")\n"
"    FormDto data sendMultipart();\n"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:779
msgid "At the moment, multipart response support is subject to the following limitations:"
msgstr "現時点では、マルチパート応答のサポートには次の制限があります。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:781
msgid "files sent in multipart responses can only be parsed to `File`, `Path` and `FileDownload`"
msgstr "マルチパート応答で送信されたファイルは、`File`、`Path`、および`FileDownload` にのみ解析できます。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:782
msgid "each field of the response type has to be annotated with `@PartType` - fields without this annotation are ignored"
msgstr "応答タイプの各フィールドには `@PartType` アノテーションを付ける必要があります - このアノテーションのないフィールドは無視されます"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:784
msgid "REST Client Reactive needs to know the classes used as multipart return types upfront. If you have an interface method that produces `multipart/form-data`, the return type will be discovered automatically. However, if you intend to use the `ClientBuilder` API to parse a response as multipart, you need to annotate your DTO class with `@MultipartForm`."
msgstr "REST Client Reactive は、マルチパートリターンタイプとして使用されるクラスを事前に知っている必要があります。 `multipart/form-data` を生成するインターフェイスメソッドがある場合、戻り型は自動的に検出されます。ただし、`ClientBuilder` API を使用して応答をマルチパートとして解析する場合は、DTO クラスに `@MultipartForm` のアノテーションを付ける必要があります。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:786
msgid "The files you download are not automatically removed and can take up a lot of disk space. Consider removing the files when you are done working with them."
msgstr "ダウンロードしたファイルは自動的に削除されず、多くのディスク領域を占有する可能性があります。作業が終わったら、ファイルを削除することを検討してください。"

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:787
#, no-wrap
msgid "Proxy support"
msgstr "プロキシーサポート"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:790
msgid "REST Client Reactive supports sending requests through a proxy.  It honors the JVM settings for it but also allows to specify both:"
msgstr "REST Client Reactive は、プロキシーを介したリクエストの送信をサポートしています。JVM 設定を尊重しますが、次の両方を指定することもできます。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:792
msgid "global client proxy settings, with `quarkus.rest-client.proxy-address`, `quarkus.rest-client.proxy-user`, `quarkus.rest-client.proxy-password`, `quarkus.rest-client.non-proxy-hosts`"
msgstr "グローバルクライアントプロキシー設定、 `quarkus.rest-client.proxy-address`、`quarkus.rest-client.proxy-user`、`quarkus.rest-client.proxy-password`、`quarkus.rest-client.non-proxy-hosts`"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:794
msgid "per-client proxy settings, with `quarkus.rest-client.<my-client>.proxy-address`, etc. These are applied only to clients injected with CDI, that is the ones created with `@RegisterRestClient`"
msgstr "`quarkus.rest-client.<my-client>.proxy-address` などのクライアントごとのプロキシー設定です。これらは、CDI で挿入されたクライアント、つまり `@RegisterRestClient` で作成されたクライアントに対してのみ適用されます。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:796
msgid "If `proxy-address` is set on the client level, the client uses its specific proxy settings. No proxy settings are propagated from the global configuration or JVM properties."
msgstr "`proxy-address` がクライアントレベルで設定されている場合、クライアントは特定のプロキシー設定を使用します。プロキシー設定は、グローバル設定または JVM プロパティーから伝播されません。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:799
msgid "If `proxy-address` is not set for the client but is set on the global level, the client uses the global settings.  Otherwise, the client uses the JVM settings."
msgstr "クライアントに `proxy-address` が設定されていないが、グローバルレベルで設定されている場合、クライアントはグローバル設定を使用します。それ以外の場合、クライアントは JVM 設定を使用します。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:802
msgid "An example configuration for setting proxy:"
msgstr "プロキシーを設定するための設定例:"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:810
#, no-wrap
msgid ""
"# global proxy configuration is used for all clients\n"
"quarkus.rest-client.proxy-address=localhost:8182\n"
"quarkus.rest-client.proxy-user=<proxy user name>\n"
"quarkus.rest-client.proxy-password=<proxy password>\n"
"quarkus.rest-client.non-proxy-hosts=example.com\n"
msgstr ""
"# global proxy configuration is used for all clients\n"
"quarkus.rest-client.proxy-address=localhost:8182\n"
"quarkus.rest-client.proxy-user=<proxy user name>\n"
"quarkus.rest-client.proxy-password=<proxy password>\n"
"quarkus.rest-client.non-proxy-hosts=example.com\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:816
#, no-wrap
msgid ""
"# per-client configuration overrides the global settings for a specific client\n"
"quarkus.rest-client.my-client.proxy-address=localhost:8183\n"
"quarkus.rest-client.my-client.proxy-user=<proxy user name>\n"
"quarkus.rest-client.my-client.proxy-password=<proxy password>\n"
"quarkus.rest-client.my-client.url=...\n"
msgstr ""
"# per-client configuration overrides the global settings for a specific client\n"
"quarkus.rest-client.my-client.proxy-address=localhost:8183\n"
"quarkus.rest-client.my-client.proxy-user=<proxy user name>\n"
"quarkus.rest-client.my-client.proxy-password=<proxy password>\n"
"quarkus.rest-client.my-client.url=...\n"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:819
msgid "MicroProfile REST Client specification does not allow setting proxy credentials. In order to specify proxy user and proxy password programmatically, you need to cast your `RestClientBuilder` to `RestClientBuilderImpl`."
msgstr "MicroProfile REST クライアント仕様では、プロキシー資格情報の設定は許可されていません。プログラムでプロキシーユーザーとプロキシーパスワードを指定するには、`RestClientBuilder` を `RestClientBuilderImpl` にキャストする必要があります。"

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:820
#, no-wrap
msgid "Package and run the application"
msgstr "アプリケーションをパッケージ化して実行する"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:823
msgid "Run the application with:"
msgstr "アプリケーションを実行します。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:827
msgid "Open your browser to http://localhost:8080/extension/id/io.quarkus:quarkus-rest-client-reactive."
msgstr "ブラウザで http://localhost:8080/extension/id/io.quarkus:quarkus-rest-client-reactive を開きます。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:829
msgid "You should see a JSON object containing some basic information about this extension."
msgstr "この拡張機能に関する基本的な情報を含む JSON オブジェクトが表示されるはずです。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:831
msgid "As usual, the application can be packaged using:"
msgstr "いつものように、アプリケーションは以下の方法でパッケージ化されます。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:835
msgid "And executed with `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr "そして次のコマンドで実行できます。`java -jar target/quarkus-app/quarkus-run.jar`"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:837
msgid "You can also generate the native executable with:"
msgstr "次のようにネイティブ実行可能ファイルを生成することもできます。"

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:840
#, no-wrap
msgid "Logging traffic"
msgstr "トラフィックの記録"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:843
msgid "REST Client Reactive can log the requests it sends and the responses it receives.  To enable logging, add the `quarkus.rest-client.logging.scope` property to your `application.properties` and set it to:"
msgstr "REST Client Reactive は、送信するリクエストと受信する応答をログに記録できます。ロギングを有効にするには、`quarkus.rest-client.logging.scope` プロパティーを `quarkus.rest-client.logging.scope` に追加し、次のように設定します。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:845
msgid "`request-response` to log the request and response contents, or"
msgstr "リクエストと応答の内容をログに記録する`request-response`、または"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:846
msgid "`all` to also enable low level logging of the underlying libraries."
msgstr "`all` は、基礎となるライブラリーの低レベルのロギングも有効にします。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:848
msgid "As HTTP messages can have large bodies, we limit the amount of body characters logged. The default limit is `100`, you can change it by specifying `quarkus.rest-client.logging.body-limit`."
msgstr "HTTP メッセージには大きな本文が含まれる可能性があるため、ログに記録される本文の文字数を制限します。デフォルトの制限は `100` ですが、`quarkus.rest-client.logging.body-limit` を指定することで変更できます。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:850
msgid "REST Client Reactive is logging the traffic with level DEBUG and does not alter logger properties. You may need to adjust your logger configuration to use this feature."
msgstr "REST Client Reactive は、レベル DEBUG でトラフィックをログに記録しており、ロガーのプロパティーを変更しません。この機能を使用するには、ロガー設定を調整する必要がある場合があります。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:852
msgid "An example logging configuration:"
msgstr "ロギング設定の例:"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:857
#, no-wrap
msgid ""
"quarkus.rest-client.logging.scope=request-response\n"
"quarkus.rest-client.logging.body-limit=50\n"
msgstr ""
"quarkus.rest-client.logging.scope=request-response\n"
"quarkus.rest-client.logging.body-limit=50\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:859
#, no-wrap
msgid "quarkus.log.category.\"org.jboss.resteasy.reactive.client.logging\".level=DEBUG\n"
msgstr "quarkus.log.category.\"org.jboss.resteasy.reactive.client.logging\".level=DEBUG\n"

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:861
#, no-wrap
msgid "Mocking the client for tests"
msgstr "テストのためのクライアントのモッキング"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:864
msgid "If you use a client injected with the `@RestClient` annotation, you can easily mock it for tests.  You can do it with Mockito's `@InjectMock` or with `QuarkusMock`."
msgstr "`@RestClient` アノテーションが挿入されたクライアントを使用する場合は、テスト用に簡単にモックすることができます。Mockito の `@InjectMock`　または `QuarkusMock` でそれを行うことができます。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:866
msgid "This section shows how to replace your client with a mock. If you would like to get a more in-depth understanding of how mocking works in Quarkus, see the blog post on https://quarkus.io/blog/mocking/[Mocking CDI beans]."
msgstr "このセクションでは、クライアントをモックに置き換える方法を示します。Quarkus でモッキングがどのように機能するかをより深く理解したい場合は、https://quarkus.io/blog/mocking/[Mocking CDI beans] のブログ投稿を参照してください。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:868
msgid "Mocking does not work when using `@NativeImageTest` or `@QuarkusIntegrationTest`."
msgstr "`@NativeImageTest` または `@QuarkusIntegrationTest` を使用すると、モッキングは機能しません。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:870
msgid "Let's assume you have the following client:"
msgstr "次のクライアントがあると仮定します。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:873
#, no-wrap
msgid "package io.quarkus.it.rest.client.main;\n"
msgstr "package io.quarkus.it.rest.client.main;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:876
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:886
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"@RegisterRestClient\n"
"public interface Client {\n"
"    @GET\n"
"    String get();\n"
"}\n"
msgstr ""
"@Path(\"/\")\n"
"@RegisterRestClient\n"
"public interface Client {\n"
"    @GET\n"
"    String get();\n"
"}\n"

#. type: Title ===
#: upstream/_guides/rest-client-reactive.adoc:889
#, no-wrap
msgid "Mocking with InjectMock"
msgstr "InjectMock でモックする"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:891
msgid "The simplest approach to mock a client for tests is to use Mockito and `@InjectMock`."
msgstr "テスト用にクライアントをモックする最も簡単な方法は、Mockito と `@InjectMock` を使用することです。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:893
msgid "First, add the following dependency to your application:"
msgstr "まず、以下の依存関係をアプリケーションに追加します。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:902
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5-mockito</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5-mockito</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:908
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-junit5-mockito\")\n"
msgstr "testImplementation(\"io.quarkus:quarkus-junit5-mockito\")\n"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:911
msgid "Then, in your test you can simply use `@InjectMock` to create and inject a mock:"
msgstr "次に、テストで `@InjectMock` を使用して、モックを作成して挿入できます。"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:916
#, no-wrap
msgid ""
"import static org.assertj.core.api.Assertions.assertThat;\n"
"import static org.mockito.Mockito.when;\n"
msgstr ""
"import static org.assertj.core.api.Assertions.assertThat;\n"
"import static org.mockito.Mockito.when;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:919
#, no-wrap
msgid ""
"import org.junit.jupiter.api.BeforeEach;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""
"import org.junit.jupiter.api.BeforeEach;\n"
"import org.junit.jupiter.api.Test;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:922
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.junit.mockito.InjectMock;\n"
msgstr ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.junit.mockito.InjectMock;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:925
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class InjectMockTest {\n"
msgstr ""
"@QuarkusTest\n"
"public class InjectMockTest {\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:928
#, no-wrap
msgid ""
"    @InjectMock\n"
"    Client mock;\n"
msgstr ""
"    @InjectMock\n"
"    Client mock;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:933
#, no-wrap
msgid ""
"    @BeforeEach\n"
"    public void setUp() {\n"
"        when(mock.get()).thenReturn(\"MockAnswer\");\n"
"    }\n"
msgstr ""
"    @BeforeEach\n"
"    public void setUp() {\n"
"        when(mock.get()).thenReturn(\"MockAnswer\");\n"
"    }\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:939
#, no-wrap
msgid ""
"    @Test\n"
"    void doTest() {\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr ""
"    @Test\n"
"    void doTest() {\n"
"        // ...\n"
"    }\n"
"}\n"

#. type: Title ===
#: upstream/_guides/rest-client-reactive.adoc:941
#, no-wrap
msgid "Mocking with QuarkusMock"
msgstr "QuarkusMock でモックする"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:943
msgid "If Mockito doesn't meet your needs, you can create a mock programmatically using `QuarkusMock`, e.g.:"
msgstr "Mockito がニーズを満たさない場合は、`QuarkusMock` を使用してプログラムでモックを作成できます。例:"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:949
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
"import org.junit.jupiter.api.BeforeEach;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""
"import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
"import org.junit.jupiter.api.BeforeEach;\n"
"import org.junit.jupiter.api.Test;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:952
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusMock;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
msgstr ""
"import io.quarkus.test.junit.QuarkusMock;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:955
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class QuarkusMockTest {\n"
msgstr ""
"@QuarkusTest\n"
"public class QuarkusMockTest {\n"

#. type: delimited block -
#: upstream/_guides/rest-client-reactive.adoc:971
#, no-wrap
msgid ""
"    @BeforeEach\n"
"    public void setUp() {\n"
"        Client customMock = new Client() { //<1>\n"
"            @Override\n"
"            public String get() {\n"
"                return \"MockAnswer\";\n"
"            }\n"
"        };\n"
"        QuarkusMock.installMockForType(customMock, Client.class, RestClient.LITERAL); // <2>\n"
"    }\n"
"    @Test\n"
"    void doTest() {\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr ""
"    @BeforeEach\n"
"    public void setUp() {\n"
"        Client customMock = new Client() { //<1>\n"
"            @Override\n"
"            public String get() {\n"
"                return \"MockAnswer\";\n"
"            }\n"
"        };\n"
"        QuarkusMock.installMockForType(customMock, Client.class, RestClient.LITERAL); // <2>\n"
"    }\n"
"    @Test\n"
"    void doTest() {\n"
"        // ...\n"
"    }\n"
"}\n"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:974
msgid "here we use a manually created implementation of the client interface to replace the actual Client"
msgstr "ここでは、手動で作成したクライアントインターフェイスの実装を使用して、実際のクライアントを置き換えます"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:975
msgid "note that `RestClient.LITERAL` has to be passed as the last argument of the `installMockForType` method"
msgstr "`RestClient.LITERAL` は `installMockForType` メソッドの最後の引数として渡される必要があることに注意してください"

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:977
#, no-wrap
msgid "Using a Mock HTTP Server for tests"
msgstr "テストにモックHTTPサーバーを使用する"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:980
msgid "In some cases you may want to mock the remote endpoint - the HTTP server - instead of mocking the client itself.  This may be especially useful for native tests, or for programmatically created clients."
msgstr "場合によっては、クライアント自体をモックするのではなく、リモートエンドポイント (HTTP サーバー) をモックしたい場合があります。これは、ネイティブテスト、またはプログラムで作成されたクライアントに特に役立つ場合があります。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:984
msgid "You can easily mock an HTTP Server with Wiremock.  The xref:rest-client.adoc#using-a-mock-http-server-for-tests[Wiremock section of the Quarkus - Using the REST Client] describes how to set it up in detail."
msgstr "Wiremock を使用して HTTP サーバーを簡単にモックできます。xref:rest-client.adoc#using-a-mock-http-server-for-tests[Wiremock section of the Quarkus - Using the REST Client] では、セットアップ方法について詳しく説明しています。"

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:985
#, no-wrap
msgid "Known limitations"
msgstr "既知の制限"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:988
msgid "While the REST Client Reactive extension aims to be a drop-in replacement for the REST Client extension, there are some differences and limitations:"
msgstr "REST Client Reactive エクステンションは、REST Client エクステンションをそのまま置き換えることを目的としていますが、いくつかの相違点と制限があります。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:991
msgid "the default scope of the client for the new extension is `@ApplicationScoped` while the `quarkus-rest-client` defaults to `@Dependent` To change this behavior, set the `quarkus.rest-client-reactive.scope` property to the fully qualified scope name."
msgstr "新しいエクステンションのクライアントのデフォルトスコープは `@ApplicationScoped` ですが、`quarkus-rest-client` のデフォルトは `@Dependent` です。この動作を変更するには、`quarkus.rest-client-reactive.scope` プロパティーを完全修飾形式のスコープ名に設定します。"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:992
msgid "it is not possible to set `HostnameVerifier` or `SSLContext`"
msgstr "`HostnameVerifier` または `SSLContext` を設定することができない"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:993
msgid "a few things that don't make sense for a non-blocking implementations, such as setting the `ExecutorService`, don't work"
msgstr "`ExecutorService` の設定など、非ブロッキング実装には意味をなさないいくつかのことが機能しません"

#. type: Title ==
#: upstream/_guides/rest-client-reactive.adoc:996
#, no-wrap
msgid "Further reading"
msgstr "さらに詳しく"

#. type: Plain text
#: upstream/_guides/rest-client-reactive.adoc:998
msgid "link:https://download.eclipse.org/microprofile/microprofile-rest-client-2.0/microprofile-rest-client-spec-2.0.html[MicroProfile Rest Client specification]"
msgstr "link:https://download.eclipse.org/microprofile/microprofile-rest-client-2.0/microprofile-rest-client-spec-2.0.html[MicroProfile Rest Client specification]"

#~ msgid "To complete this guide, you need:"
#~ msgstr "このガイドを完成させるには、以下が必要です:"

#~ msgid "less than 15 minutes"
#~ msgstr "15分未満"

#~ msgid "an IDE"
#~ msgstr "IDE"

#~ msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
#~ msgstr "JDK 11+ がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#~ msgid "Apache Maven {maven-version}"
#~ msgstr "Apache Maven {maven-version}"
